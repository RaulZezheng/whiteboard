// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_action_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_action_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "element.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_action_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_action_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_action_2eproto;
namespace protobuf {
class ActionResponse;
struct ActionResponseDefaultTypeInternal;
extern ActionResponseDefaultTypeInternal _ActionResponse_default_instance_;
class AddElementRequest;
struct AddElementRequestDefaultTypeInternal;
extern AddElementRequestDefaultTypeInternal _AddElementRequest_default_instance_;
class BroadCast;
struct BroadCastDefaultTypeInternal;
extern BroadCastDefaultTypeInternal _BroadCast_default_instance_;
class CreateSessionRequest;
struct CreateSessionRequestDefaultTypeInternal;
extern CreateSessionRequestDefaultTypeInternal _CreateSessionRequest_default_instance_;
class CreateWhiteBoardRequest;
struct CreateWhiteBoardRequestDefaultTypeInternal;
extern CreateWhiteBoardRequestDefaultTypeInternal _CreateWhiteBoardRequest_default_instance_;
class DeleteElementRequest;
struct DeleteElementRequestDefaultTypeInternal;
extern DeleteElementRequestDefaultTypeInternal _DeleteElementRequest_default_instance_;
class JoinSessionRequest;
struct JoinSessionRequestDefaultTypeInternal;
extern JoinSessionRequestDefaultTypeInternal _JoinSessionRequest_default_instance_;
class LoginRequest;
struct LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
struct LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class ModifyElementRequest;
struct ModifyElementRequestDefaultTypeInternal;
extern ModifyElementRequestDefaultTypeInternal _ModifyElementRequest_default_instance_;
class PacketAction;
struct PacketActionDefaultTypeInternal;
extern PacketActionDefaultTypeInternal _PacketAction_default_instance_;
class QuitSessionRequest;
struct QuitSessionRequestDefaultTypeInternal;
extern QuitSessionRequestDefaultTypeInternal _QuitSessionRequest_default_instance_;
class RegisterRequest;
struct RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class RegisterResponse;
struct RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
class SaveWhiteboardRequest;
struct SaveWhiteboardRequestDefaultTypeInternal;
extern SaveWhiteboardRequestDefaultTypeInternal _SaveWhiteboardRequest_default_instance_;
class TempIDResponse;
struct TempIDResponseDefaultTypeInternal;
extern TempIDResponseDefaultTypeInternal _TempIDResponse_default_instance_;
}  // namespace protobuf
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protobuf {

// ===================================================================


// -------------------------------------------------------------------

class TempIDResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.TempIDResponse) */ {
 public:
  inline TempIDResponse() : TempIDResponse(nullptr) {}
  ~TempIDResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TempIDResponse(::google::protobuf::internal::ConstantInitialized);

  inline TempIDResponse(const TempIDResponse& from)
      : TempIDResponse(nullptr, from) {}
  TempIDResponse(TempIDResponse&& from) noexcept
    : TempIDResponse() {
    *this = ::std::move(from);
  }

  inline TempIDResponse& operator=(const TempIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TempIDResponse& operator=(TempIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TempIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TempIDResponse* internal_default_instance() {
    return reinterpret_cast<const TempIDResponse*>(
               &_TempIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TempIDResponse& a, TempIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TempIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TempIDResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TempIDResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TempIDResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TempIDResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TempIDResponse& from) {
    TempIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TempIDResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf.TempIDResponse";
  }
  protected:
  explicit TempIDResponse(::google::protobuf::Arena* arena);
  TempIDResponse(::google::protobuf::Arena* arena, const TempIDResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // uint32 user_id = 2;
  void clear_user_id() ;
  ::uint32_t user_id() const;
  void set_user_id(::uint32_t value);

  private:
  ::uint32_t _internal_user_id() const;
  void _internal_set_user_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.TempIDResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool success_;
    ::uint32_t user_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_action_2eproto;
};// -------------------------------------------------------------------

class SaveWhiteboardRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.SaveWhiteboardRequest) */ {
 public:
  inline SaveWhiteboardRequest() : SaveWhiteboardRequest(nullptr) {}
  ~SaveWhiteboardRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SaveWhiteboardRequest(::google::protobuf::internal::ConstantInitialized);

  inline SaveWhiteboardRequest(const SaveWhiteboardRequest& from)
      : SaveWhiteboardRequest(nullptr, from) {}
  SaveWhiteboardRequest(SaveWhiteboardRequest&& from) noexcept
    : SaveWhiteboardRequest() {
    *this = ::std::move(from);
  }

  inline SaveWhiteboardRequest& operator=(const SaveWhiteboardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveWhiteboardRequest& operator=(SaveWhiteboardRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveWhiteboardRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveWhiteboardRequest* internal_default_instance() {
    return reinterpret_cast<const SaveWhiteboardRequest*>(
               &_SaveWhiteboardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SaveWhiteboardRequest& a, SaveWhiteboardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveWhiteboardRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveWhiteboardRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaveWhiteboardRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SaveWhiteboardRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SaveWhiteboardRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SaveWhiteboardRequest& from) {
    SaveWhiteboardRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SaveWhiteboardRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf.SaveWhiteboardRequest";
  }
  protected:
  explicit SaveWhiteboardRequest(::google::protobuf::Arena* arena);
  SaveWhiteboardRequest(::google::protobuf::Arena* arena, const SaveWhiteboardRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFormatFieldNumber = 2,
    kFilePathFieldNumber = 3,
    kSessionIdFieldNumber = 1,
  };
  // string file_format = 2;
  void clear_file_format() ;
  const std::string& file_format() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_format(Arg_&& arg, Args_... args);
  std::string* mutable_file_format();
  PROTOBUF_NODISCARD std::string* release_file_format();
  void set_allocated_file_format(std::string* value);

  private:
  const std::string& _internal_file_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_format(
      const std::string& value);
  std::string* _internal_mutable_file_format();

  public:
  // string file_path = 3;
  void clear_file_path() ;
  const std::string& file_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_path(Arg_&& arg, Args_... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* value);

  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(
      const std::string& value);
  std::string* _internal_mutable_file_path();

  public:
  // uint32 session_id = 1;
  void clear_session_id() ;
  ::uint32_t session_id() const;
  void set_session_id(::uint32_t value);

  private:
  ::uint32_t _internal_session_id() const;
  void _internal_set_session_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.SaveWhiteboardRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr file_format_;
    ::google::protobuf::internal::ArenaStringPtr file_path_;
    ::uint32_t session_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_action_2eproto;
};// -------------------------------------------------------------------

class RegisterResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.RegisterResponse) */ {
 public:
  inline RegisterResponse() : RegisterResponse(nullptr) {}
  ~RegisterResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterResponse(::google::protobuf::internal::ConstantInitialized);

  inline RegisterResponse(const RegisterResponse& from)
      : RegisterResponse(nullptr, from) {}
  RegisterResponse(RegisterResponse&& from) noexcept
    : RegisterResponse() {
    *this = ::std::move(from);
  }

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterResponse& operator=(RegisterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterResponse*>(
               &_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RegisterResponse& a, RegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisterResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RegisterResponse& from) {
    RegisterResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RegisterResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf.RegisterResponse";
  }
  protected:
  explicit RegisterResponse(::google::protobuf::Arena* arena);
  RegisterResponse(::google::protobuf::Arena* arena, const RegisterResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // uint32 uid = 2;
  void clear_uid() ;
  ::uint32_t uid() const;
  void set_uid(::uint32_t value);

  private:
  ::uint32_t _internal_uid() const;
  void _internal_set_uid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.RegisterResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool success_;
    ::uint32_t uid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_action_2eproto;
};// -------------------------------------------------------------------

class RegisterRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {}
  ~RegisterRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterRequest(::google::protobuf::internal::ConstantInitialized);

  inline RegisterRequest(const RegisterRequest& from)
      : RegisterRequest(nullptr, from) {}
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisterRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RegisterRequest& from) {
    RegisterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RegisterRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf.RegisterRequest";
  }
  protected:
  explicit RegisterRequest(::google::protobuf::Arena* arena);
  RegisterRequest(::google::protobuf::Arena* arena, const RegisterRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kPasswordHashFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // string username = 2;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string password_hash = 3;
  void clear_password_hash() ;
  const std::string& password_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password_hash(Arg_&& arg, Args_... args);
  std::string* mutable_password_hash();
  PROTOBUF_NODISCARD std::string* release_password_hash();
  void set_allocated_password_hash(std::string* value);

  private:
  const std::string& _internal_password_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password_hash(
      const std::string& value);
  std::string* _internal_mutable_password_hash();

  public:
  // uint32 user_id = 1;
  void clear_user_id() ;
  ::uint32_t user_id() const;
  void set_user_id(::uint32_t value);

  private:
  ::uint32_t _internal_user_id() const;
  void _internal_set_user_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.RegisterRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      54, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_hash_;
    ::uint32_t user_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_action_2eproto;
};// -------------------------------------------------------------------

class QuitSessionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.QuitSessionRequest) */ {
 public:
  inline QuitSessionRequest() : QuitSessionRequest(nullptr) {}
  ~QuitSessionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuitSessionRequest(::google::protobuf::internal::ConstantInitialized);

  inline QuitSessionRequest(const QuitSessionRequest& from)
      : QuitSessionRequest(nullptr, from) {}
  QuitSessionRequest(QuitSessionRequest&& from) noexcept
    : QuitSessionRequest() {
    *this = ::std::move(from);
  }

  inline QuitSessionRequest& operator=(const QuitSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitSessionRequest& operator=(QuitSessionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuitSessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuitSessionRequest* internal_default_instance() {
    return reinterpret_cast<const QuitSessionRequest*>(
               &_QuitSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QuitSessionRequest& a, QuitSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitSessionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuitSessionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuitSessionRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuitSessionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QuitSessionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const QuitSessionRequest& from) {
    QuitSessionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(QuitSessionRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf.QuitSessionRequest";
  }
  protected:
  explicit QuitSessionRequest(::google::protobuf::Arena* arena);
  QuitSessionRequest(::google::protobuf::Arena* arena, const QuitSessionRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhiteboardIdFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string whiteboard_id = 2;
  void clear_whiteboard_id() ;
  const std::string& whiteboard_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_whiteboard_id(Arg_&& arg, Args_... args);
  std::string* mutable_whiteboard_id();
  PROTOBUF_NODISCARD std::string* release_whiteboard_id();
  void set_allocated_whiteboard_id(std::string* value);

  private:
  const std::string& _internal_whiteboard_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_whiteboard_id(
      const std::string& value);
  std::string* _internal_mutable_whiteboard_id();

  public:
  // uint32 user_id = 1;
  void clear_user_id() ;
  ::uint32_t user_id() const;
  void set_user_id(::uint32_t value);

  private:
  ::uint32_t _internal_user_id() const;
  void _internal_set_user_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.QuitSessionRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr whiteboard_id_;
    ::uint32_t user_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_action_2eproto;
};// -------------------------------------------------------------------

class LoginResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  ~LoginResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LoginResponse(::google::protobuf::internal::ConstantInitialized);

  inline LoginResponse(const LoginResponse& from)
      : LoginResponse(nullptr, from) {}
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoginResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LoginResponse& from) {
    LoginResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LoginResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf.LoginResponse";
  }
  protected:
  explicit LoginResponse(::google::protobuf::Arena* arena);
  LoginResponse(::google::protobuf::Arena* arena, const LoginResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // uint32 uid = 2;
  void clear_uid() ;
  ::uint32_t uid() const;
  void set_uid(::uint32_t value);

  private:
  ::uint32_t _internal_uid() const;
  void _internal_set_uid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.LoginResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool success_;
    ::uint32_t uid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_action_2eproto;
};// -------------------------------------------------------------------

class LoginRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  ~LoginRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LoginRequest(::google::protobuf::internal::ConstantInitialized);

  inline LoginRequest(const LoginRequest& from)
      : LoginRequest(nullptr, from) {}
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoginRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LoginRequest& from) {
    LoginRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LoginRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf.LoginRequest";
  }
  protected:
  explicit LoginRequest(::google::protobuf::Arena* arena);
  LoginRequest(::google::protobuf::Arena* arena, const LoginRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kPasswordHashFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // string username = 2;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string password_hash = 3;
  void clear_password_hash() ;
  const std::string& password_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password_hash(Arg_&& arg, Args_... args);
  std::string* mutable_password_hash();
  PROTOBUF_NODISCARD std::string* release_password_hash();
  void set_allocated_password_hash(std::string* value);

  private:
  const std::string& _internal_password_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password_hash(
      const std::string& value);
  std::string* _internal_mutable_password_hash();

  public:
  // uint32 user_id = 1;
  void clear_user_id() ;
  ::uint32_t user_id() const;
  void set_user_id(::uint32_t value);

  private:
  ::uint32_t _internal_user_id() const;
  void _internal_set_user_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.LoginRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_hash_;
    ::uint32_t user_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_action_2eproto;
};// -------------------------------------------------------------------

class JoinSessionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.JoinSessionRequest) */ {
 public:
  inline JoinSessionRequest() : JoinSessionRequest(nullptr) {}
  ~JoinSessionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JoinSessionRequest(::google::protobuf::internal::ConstantInitialized);

  inline JoinSessionRequest(const JoinSessionRequest& from)
      : JoinSessionRequest(nullptr, from) {}
  JoinSessionRequest(JoinSessionRequest&& from) noexcept
    : JoinSessionRequest() {
    *this = ::std::move(from);
  }

  inline JoinSessionRequest& operator=(const JoinSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinSessionRequest& operator=(JoinSessionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinSessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinSessionRequest* internal_default_instance() {
    return reinterpret_cast<const JoinSessionRequest*>(
               &_JoinSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JoinSessionRequest& a, JoinSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinSessionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinSessionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinSessionRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinSessionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JoinSessionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JoinSessionRequest& from) {
    JoinSessionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(JoinSessionRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf.JoinSessionRequest";
  }
  protected:
  explicit JoinSessionRequest(::google::protobuf::Arena* arena);
  JoinSessionRequest(::google::protobuf::Arena* arena, const JoinSessionRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhiteboardIdFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string whiteboard_id = 2;
  void clear_whiteboard_id() ;
  const std::string& whiteboard_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_whiteboard_id(Arg_&& arg, Args_... args);
  std::string* mutable_whiteboard_id();
  PROTOBUF_NODISCARD std::string* release_whiteboard_id();
  void set_allocated_whiteboard_id(std::string* value);

  private:
  const std::string& _internal_whiteboard_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_whiteboard_id(
      const std::string& value);
  std::string* _internal_mutable_whiteboard_id();

  public:
  // uint32 user_id = 1;
  void clear_user_id() ;
  ::uint32_t user_id() const;
  void set_user_id(::uint32_t value);

  private:
  ::uint32_t _internal_user_id() const;
  void _internal_set_user_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.JoinSessionRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr whiteboard_id_;
    ::uint32_t user_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_action_2eproto;
};// -------------------------------------------------------------------

class CreateWhiteBoardRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.CreateWhiteBoardRequest) */ {
 public:
  inline CreateWhiteBoardRequest() : CreateWhiteBoardRequest(nullptr) {}
  ~CreateWhiteBoardRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateWhiteBoardRequest(::google::protobuf::internal::ConstantInitialized);

  inline CreateWhiteBoardRequest(const CreateWhiteBoardRequest& from)
      : CreateWhiteBoardRequest(nullptr, from) {}
  CreateWhiteBoardRequest(CreateWhiteBoardRequest&& from) noexcept
    : CreateWhiteBoardRequest() {
    *this = ::std::move(from);
  }

  inline CreateWhiteBoardRequest& operator=(const CreateWhiteBoardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateWhiteBoardRequest& operator=(CreateWhiteBoardRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateWhiteBoardRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateWhiteBoardRequest* internal_default_instance() {
    return reinterpret_cast<const CreateWhiteBoardRequest*>(
               &_CreateWhiteBoardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateWhiteBoardRequest& a, CreateWhiteBoardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateWhiteBoardRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateWhiteBoardRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateWhiteBoardRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateWhiteBoardRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateWhiteBoardRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CreateWhiteBoardRequest& from) {
    CreateWhiteBoardRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreateWhiteBoardRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf.CreateWhiteBoardRequest";
  }
  protected:
  explicit CreateWhiteBoardRequest(::google::protobuf::Arena* arena);
  CreateWhiteBoardRequest(::google::protobuf::Arena* arena, const CreateWhiteBoardRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // uint32 user_id = 1;
  void clear_user_id() ;
  ::uint32_t user_id() const;
  void set_user_id(::uint32_t value);

  private:
  ::uint32_t _internal_user_id() const;
  void _internal_set_user_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.CreateWhiteBoardRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t user_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_action_2eproto;
};// -------------------------------------------------------------------

class CreateSessionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.CreateSessionRequest) */ {
 public:
  inline CreateSessionRequest() : CreateSessionRequest(nullptr) {}
  ~CreateSessionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateSessionRequest(::google::protobuf::internal::ConstantInitialized);

  inline CreateSessionRequest(const CreateSessionRequest& from)
      : CreateSessionRequest(nullptr, from) {}
  CreateSessionRequest(CreateSessionRequest&& from) noexcept
    : CreateSessionRequest() {
    *this = ::std::move(from);
  }

  inline CreateSessionRequest& operator=(const CreateSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSessionRequest& operator=(CreateSessionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSessionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSessionRequest*>(
               &_CreateSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateSessionRequest& a, CreateSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSessionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSessionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSessionRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSessionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateSessionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CreateSessionRequest& from) {
    CreateSessionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreateSessionRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf.CreateSessionRequest";
  }
  protected:
  explicit CreateSessionRequest(::google::protobuf::Arena* arena);
  CreateSessionRequest(::google::protobuf::Arena* arena, const CreateSessionRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhiteboardIdFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string whiteboard_id = 2;
  void clear_whiteboard_id() ;
  const std::string& whiteboard_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_whiteboard_id(Arg_&& arg, Args_... args);
  std::string* mutable_whiteboard_id();
  PROTOBUF_NODISCARD std::string* release_whiteboard_id();
  void set_allocated_whiteboard_id(std::string* value);

  private:
  const std::string& _internal_whiteboard_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_whiteboard_id(
      const std::string& value);
  std::string* _internal_mutable_whiteboard_id();

  public:
  // uint32 user_id = 1;
  void clear_user_id() ;
  ::uint32_t user_id() const;
  void set_user_id(::uint32_t value);

  private:
  ::uint32_t _internal_user_id() const;
  void _internal_set_user_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.CreateSessionRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr whiteboard_id_;
    ::uint32_t user_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_action_2eproto;
};// -------------------------------------------------------------------

class ActionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.ActionResponse) */ {
 public:
  inline ActionResponse() : ActionResponse(nullptr) {}
  ~ActionResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ActionResponse(::google::protobuf::internal::ConstantInitialized);

  inline ActionResponse(const ActionResponse& from)
      : ActionResponse(nullptr, from) {}
  ActionResponse(ActionResponse&& from) noexcept
    : ActionResponse() {
    *this = ::std::move(from);
  }

  inline ActionResponse& operator=(const ActionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionResponse& operator=(ActionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActionResponse* internal_default_instance() {
    return reinterpret_cast<const ActionResponse*>(
               &_ActionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ActionResponse& a, ActionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ActionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ActionResponse& from) {
    ActionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ActionResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf.ActionResponse";
  }
  protected:
  explicit ActionResponse(::google::protobuf::Arena* arena);
  ActionResponse(::google::protobuf::Arena* arena, const ActionResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.ActionResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      39, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_action_2eproto;
};// -------------------------------------------------------------------

class ModifyElementRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.ModifyElementRequest) */ {
 public:
  inline ModifyElementRequest() : ModifyElementRequest(nullptr) {}
  ~ModifyElementRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModifyElementRequest(::google::protobuf::internal::ConstantInitialized);

  inline ModifyElementRequest(const ModifyElementRequest& from)
      : ModifyElementRequest(nullptr, from) {}
  ModifyElementRequest(ModifyElementRequest&& from) noexcept
    : ModifyElementRequest() {
    *this = ::std::move(from);
  }

  inline ModifyElementRequest& operator=(const ModifyElementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyElementRequest& operator=(ModifyElementRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyElementRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyElementRequest* internal_default_instance() {
    return reinterpret_cast<const ModifyElementRequest*>(
               &_ModifyElementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ModifyElementRequest& a, ModifyElementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyElementRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyElementRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModifyElementRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModifyElementRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModifyElementRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ModifyElementRequest& from) {
    ModifyElementRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ModifyElementRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf.ModifyElementRequest";
  }
  protected:
  explicit ModifyElementRequest(::google::protobuf::Arena* arena);
  ModifyElementRequest(::google::protobuf::Arena* arena, const ModifyElementRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhiteboardIdFieldNumber = 2,
    kOrigElementFieldNumber = 3,
    kModiElementFieldNumber = 4,
    kUserIdFieldNumber = 1,
  };
  // string whiteboard_id = 2;
  void clear_whiteboard_id() ;
  const std::string& whiteboard_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_whiteboard_id(Arg_&& arg, Args_... args);
  std::string* mutable_whiteboard_id();
  PROTOBUF_NODISCARD std::string* release_whiteboard_id();
  void set_allocated_whiteboard_id(std::string* value);

  private:
  const std::string& _internal_whiteboard_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_whiteboard_id(
      const std::string& value);
  std::string* _internal_mutable_whiteboard_id();

  public:
  // .protobuf.Element orig_element = 3;
  bool has_orig_element() const;
  void clear_orig_element() ;
  const ::protobuf::Element& orig_element() const;
  PROTOBUF_NODISCARD ::protobuf::Element* release_orig_element();
  ::protobuf::Element* mutable_orig_element();
  void set_allocated_orig_element(::protobuf::Element* value);
  void unsafe_arena_set_allocated_orig_element(::protobuf::Element* value);
  ::protobuf::Element* unsafe_arena_release_orig_element();

  private:
  const ::protobuf::Element& _internal_orig_element() const;
  ::protobuf::Element* _internal_mutable_orig_element();

  public:
  // .protobuf.Element modi_element = 4;
  bool has_modi_element() const;
  void clear_modi_element() ;
  const ::protobuf::Element& modi_element() const;
  PROTOBUF_NODISCARD ::protobuf::Element* release_modi_element();
  ::protobuf::Element* mutable_modi_element();
  void set_allocated_modi_element(::protobuf::Element* value);
  void unsafe_arena_set_allocated_modi_element(::protobuf::Element* value);
  ::protobuf::Element* unsafe_arena_release_modi_element();

  private:
  const ::protobuf::Element& _internal_modi_element() const;
  ::protobuf::Element* _internal_mutable_modi_element();

  public:
  // uint32 user_id = 1;
  void clear_user_id() ;
  ::uint32_t user_id() const;
  void set_user_id(::uint32_t value);

  private:
  ::uint32_t _internal_user_id() const;
  void _internal_set_user_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.ModifyElementRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr whiteboard_id_;
    ::protobuf::Element* orig_element_;
    ::protobuf::Element* modi_element_;
    ::uint32_t user_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_action_2eproto;
};// -------------------------------------------------------------------

class DeleteElementRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.DeleteElementRequest) */ {
 public:
  inline DeleteElementRequest() : DeleteElementRequest(nullptr) {}
  ~DeleteElementRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteElementRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeleteElementRequest(const DeleteElementRequest& from)
      : DeleteElementRequest(nullptr, from) {}
  DeleteElementRequest(DeleteElementRequest&& from) noexcept
    : DeleteElementRequest() {
    *this = ::std::move(from);
  }

  inline DeleteElementRequest& operator=(const DeleteElementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteElementRequest& operator=(DeleteElementRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteElementRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteElementRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteElementRequest*>(
               &_DeleteElementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteElementRequest& a, DeleteElementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteElementRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteElementRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteElementRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteElementRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteElementRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeleteElementRequest& from) {
    DeleteElementRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteElementRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf.DeleteElementRequest";
  }
  protected:
  explicit DeleteElementRequest(::google::protobuf::Arena* arena);
  DeleteElementRequest(::google::protobuf::Arena* arena, const DeleteElementRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhiteboardIdFieldNumber = 2,
    kOrigElementFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // string whiteboard_id = 2;
  void clear_whiteboard_id() ;
  const std::string& whiteboard_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_whiteboard_id(Arg_&& arg, Args_... args);
  std::string* mutable_whiteboard_id();
  PROTOBUF_NODISCARD std::string* release_whiteboard_id();
  void set_allocated_whiteboard_id(std::string* value);

  private:
  const std::string& _internal_whiteboard_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_whiteboard_id(
      const std::string& value);
  std::string* _internal_mutable_whiteboard_id();

  public:
  // .protobuf.Element orig_element = 3;
  bool has_orig_element() const;
  void clear_orig_element() ;
  const ::protobuf::Element& orig_element() const;
  PROTOBUF_NODISCARD ::protobuf::Element* release_orig_element();
  ::protobuf::Element* mutable_orig_element();
  void set_allocated_orig_element(::protobuf::Element* value);
  void unsafe_arena_set_allocated_orig_element(::protobuf::Element* value);
  ::protobuf::Element* unsafe_arena_release_orig_element();

  private:
  const ::protobuf::Element& _internal_orig_element() const;
  ::protobuf::Element* _internal_mutable_orig_element();

  public:
  // uint32 user_id = 1;
  void clear_user_id() ;
  ::uint32_t user_id() const;
  void set_user_id(::uint32_t value);

  private:
  ::uint32_t _internal_user_id() const;
  void _internal_set_user_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.DeleteElementRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr whiteboard_id_;
    ::protobuf::Element* orig_element_;
    ::uint32_t user_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_action_2eproto;
};// -------------------------------------------------------------------

class BroadCast final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.BroadCast) */ {
 public:
  inline BroadCast() : BroadCast(nullptr) {}
  ~BroadCast() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BroadCast(::google::protobuf::internal::ConstantInitialized);

  inline BroadCast(const BroadCast& from)
      : BroadCast(nullptr, from) {}
  BroadCast(BroadCast&& from) noexcept
    : BroadCast() {
    *this = ::std::move(from);
  }

  inline BroadCast& operator=(const BroadCast& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadCast& operator=(BroadCast&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadCast& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadCast* internal_default_instance() {
    return reinterpret_cast<const BroadCast*>(
               &_BroadCast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BroadCast& a, BroadCast& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadCast* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadCast* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadCast* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadCast>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BroadCast& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BroadCast& from) {
    BroadCast::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BroadCast* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf.BroadCast";
  }
  protected:
  explicit BroadCast(::google::protobuf::Arena* arena);
  BroadCast(::google::protobuf::Arena* arena, const BroadCast& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .protobuf.Element elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;

  public:
  void clear_elements() ;
  ::protobuf::Element* mutable_elements(int index);
  ::google::protobuf::RepeatedPtrField< ::protobuf::Element >*
      mutable_elements();
  private:
  const ::google::protobuf::RepeatedPtrField<::protobuf::Element>& _internal_elements() const;
  ::google::protobuf::RepeatedPtrField<::protobuf::Element>* _internal_mutable_elements();
  public:
  const ::protobuf::Element& elements(int index) const;
  ::protobuf::Element* add_elements();
  const ::google::protobuf::RepeatedPtrField< ::protobuf::Element >&
      elements() const;
  // @@protoc_insertion_point(class_scope:protobuf.BroadCast)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::protobuf::Element > elements_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_action_2eproto;
};// -------------------------------------------------------------------

class AddElementRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.AddElementRequest) */ {
 public:
  inline AddElementRequest() : AddElementRequest(nullptr) {}
  ~AddElementRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddElementRequest(::google::protobuf::internal::ConstantInitialized);

  inline AddElementRequest(const AddElementRequest& from)
      : AddElementRequest(nullptr, from) {}
  AddElementRequest(AddElementRequest&& from) noexcept
    : AddElementRequest() {
    *this = ::std::move(from);
  }

  inline AddElementRequest& operator=(const AddElementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddElementRequest& operator=(AddElementRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddElementRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddElementRequest* internal_default_instance() {
    return reinterpret_cast<const AddElementRequest*>(
               &_AddElementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddElementRequest& a, AddElementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddElementRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddElementRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddElementRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddElementRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddElementRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AddElementRequest& from) {
    AddElementRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AddElementRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf.AddElementRequest";
  }
  protected:
  explicit AddElementRequest(::google::protobuf::Arena* arena);
  AddElementRequest(::google::protobuf::Arena* arena, const AddElementRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhiteboardIdFieldNumber = 2,
    kElementFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // string whiteboard_id = 2;
  void clear_whiteboard_id() ;
  const std::string& whiteboard_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_whiteboard_id(Arg_&& arg, Args_... args);
  std::string* mutable_whiteboard_id();
  PROTOBUF_NODISCARD std::string* release_whiteboard_id();
  void set_allocated_whiteboard_id(std::string* value);

  private:
  const std::string& _internal_whiteboard_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_whiteboard_id(
      const std::string& value);
  std::string* _internal_mutable_whiteboard_id();

  public:
  // .protobuf.Element element = 3;
  bool has_element() const;
  void clear_element() ;
  const ::protobuf::Element& element() const;
  PROTOBUF_NODISCARD ::protobuf::Element* release_element();
  ::protobuf::Element* mutable_element();
  void set_allocated_element(::protobuf::Element* value);
  void unsafe_arena_set_allocated_element(::protobuf::Element* value);
  ::protobuf::Element* unsafe_arena_release_element();

  private:
  const ::protobuf::Element& _internal_element() const;
  ::protobuf::Element* _internal_mutable_element();

  public:
  // uint32 user_id = 1;
  void clear_user_id() ;
  ::uint32_t user_id() const;
  void set_user_id(::uint32_t value);

  private:
  ::uint32_t _internal_user_id() const;
  void _internal_set_user_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf.AddElementRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr whiteboard_id_;
    ::protobuf::Element* element_;
    ::uint32_t user_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_action_2eproto;
};// -------------------------------------------------------------------

class PacketAction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.PacketAction) */ {
 public:
  inline PacketAction() : PacketAction(nullptr) {}
  ~PacketAction() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PacketAction(::google::protobuf::internal::ConstantInitialized);

  inline PacketAction(const PacketAction& from)
      : PacketAction(nullptr, from) {}
  PacketAction(PacketAction&& from) noexcept
    : PacketAction() {
    *this = ::std::move(from);
  }

  inline PacketAction& operator=(const PacketAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketAction& operator=(PacketAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketAction& default_instance() {
    return *internal_default_instance();
  }
  enum ActionTypeCase {
    kCreateWhiteBoard = 1,
    kCreateSession = 2,
    kJoinSession = 3,
    kQuitSession = 4,
    kAddElement = 5,
    kModifyElement = 6,
    kDeleteElement = 7,
    kSaveWhiteboard = 8,
    kRegisterRequest = 9,
    kLoginRequest = 10,
    kActionResponse = 11,
    kBroadcast = 12,
    kTempIdResponse = 13,
    ACTION_TYPE_NOT_SET = 0,
  };

  static inline const PacketAction* internal_default_instance() {
    return reinterpret_cast<const PacketAction*>(
               &_PacketAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PacketAction& a, PacketAction& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketAction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketAction* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PacketAction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PacketAction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PacketAction& from) {
    PacketAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PacketAction* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf.PacketAction";
  }
  protected:
  explicit PacketAction(::google::protobuf::Arena* arena);
  PacketAction(::google::protobuf::Arena* arena, const PacketAction& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreateWhiteBoardFieldNumber = 1,
    kCreateSessionFieldNumber = 2,
    kJoinSessionFieldNumber = 3,
    kQuitSessionFieldNumber = 4,
    kAddElementFieldNumber = 5,
    kModifyElementFieldNumber = 6,
    kDeleteElementFieldNumber = 7,
    kSaveWhiteboardFieldNumber = 8,
    kRegisterRequestFieldNumber = 9,
    kLoginRequestFieldNumber = 10,
    kActionResponseFieldNumber = 11,
    kBroadcastFieldNumber = 12,
    kTempIdResponseFieldNumber = 13,
  };
  // .protobuf.CreateWhiteBoardRequest createWhiteBoard = 1;
  bool has_createwhiteboard() const;
  private:
  bool _internal_has_createwhiteboard() const;

  public:
  void clear_createwhiteboard() ;
  const ::protobuf::CreateWhiteBoardRequest& createwhiteboard() const;
  PROTOBUF_NODISCARD ::protobuf::CreateWhiteBoardRequest* release_createwhiteboard();
  ::protobuf::CreateWhiteBoardRequest* mutable_createwhiteboard();
  void set_allocated_createwhiteboard(::protobuf::CreateWhiteBoardRequest* value);
  void unsafe_arena_set_allocated_createwhiteboard(::protobuf::CreateWhiteBoardRequest* value);
  ::protobuf::CreateWhiteBoardRequest* unsafe_arena_release_createwhiteboard();

  private:
  const ::protobuf::CreateWhiteBoardRequest& _internal_createwhiteboard() const;
  ::protobuf::CreateWhiteBoardRequest* _internal_mutable_createwhiteboard();

  public:
  // .protobuf.CreateSessionRequest createSession = 2;
  bool has_createsession() const;
  private:
  bool _internal_has_createsession() const;

  public:
  void clear_createsession() ;
  const ::protobuf::CreateSessionRequest& createsession() const;
  PROTOBUF_NODISCARD ::protobuf::CreateSessionRequest* release_createsession();
  ::protobuf::CreateSessionRequest* mutable_createsession();
  void set_allocated_createsession(::protobuf::CreateSessionRequest* value);
  void unsafe_arena_set_allocated_createsession(::protobuf::CreateSessionRequest* value);
  ::protobuf::CreateSessionRequest* unsafe_arena_release_createsession();

  private:
  const ::protobuf::CreateSessionRequest& _internal_createsession() const;
  ::protobuf::CreateSessionRequest* _internal_mutable_createsession();

  public:
  // .protobuf.JoinSessionRequest joinSession = 3;
  bool has_joinsession() const;
  private:
  bool _internal_has_joinsession() const;

  public:
  void clear_joinsession() ;
  const ::protobuf::JoinSessionRequest& joinsession() const;
  PROTOBUF_NODISCARD ::protobuf::JoinSessionRequest* release_joinsession();
  ::protobuf::JoinSessionRequest* mutable_joinsession();
  void set_allocated_joinsession(::protobuf::JoinSessionRequest* value);
  void unsafe_arena_set_allocated_joinsession(::protobuf::JoinSessionRequest* value);
  ::protobuf::JoinSessionRequest* unsafe_arena_release_joinsession();

  private:
  const ::protobuf::JoinSessionRequest& _internal_joinsession() const;
  ::protobuf::JoinSessionRequest* _internal_mutable_joinsession();

  public:
  // .protobuf.QuitSessionRequest quitSession = 4;
  bool has_quitsession() const;
  private:
  bool _internal_has_quitsession() const;

  public:
  void clear_quitsession() ;
  const ::protobuf::QuitSessionRequest& quitsession() const;
  PROTOBUF_NODISCARD ::protobuf::QuitSessionRequest* release_quitsession();
  ::protobuf::QuitSessionRequest* mutable_quitsession();
  void set_allocated_quitsession(::protobuf::QuitSessionRequest* value);
  void unsafe_arena_set_allocated_quitsession(::protobuf::QuitSessionRequest* value);
  ::protobuf::QuitSessionRequest* unsafe_arena_release_quitsession();

  private:
  const ::protobuf::QuitSessionRequest& _internal_quitsession() const;
  ::protobuf::QuitSessionRequest* _internal_mutable_quitsession();

  public:
  // .protobuf.AddElementRequest addElement = 5;
  bool has_addelement() const;
  private:
  bool _internal_has_addelement() const;

  public:
  void clear_addelement() ;
  const ::protobuf::AddElementRequest& addelement() const;
  PROTOBUF_NODISCARD ::protobuf::AddElementRequest* release_addelement();
  ::protobuf::AddElementRequest* mutable_addelement();
  void set_allocated_addelement(::protobuf::AddElementRequest* value);
  void unsafe_arena_set_allocated_addelement(::protobuf::AddElementRequest* value);
  ::protobuf::AddElementRequest* unsafe_arena_release_addelement();

  private:
  const ::protobuf::AddElementRequest& _internal_addelement() const;
  ::protobuf::AddElementRequest* _internal_mutable_addelement();

  public:
  // .protobuf.ModifyElementRequest modifyElement = 6;
  bool has_modifyelement() const;
  private:
  bool _internal_has_modifyelement() const;

  public:
  void clear_modifyelement() ;
  const ::protobuf::ModifyElementRequest& modifyelement() const;
  PROTOBUF_NODISCARD ::protobuf::ModifyElementRequest* release_modifyelement();
  ::protobuf::ModifyElementRequest* mutable_modifyelement();
  void set_allocated_modifyelement(::protobuf::ModifyElementRequest* value);
  void unsafe_arena_set_allocated_modifyelement(::protobuf::ModifyElementRequest* value);
  ::protobuf::ModifyElementRequest* unsafe_arena_release_modifyelement();

  private:
  const ::protobuf::ModifyElementRequest& _internal_modifyelement() const;
  ::protobuf::ModifyElementRequest* _internal_mutable_modifyelement();

  public:
  // .protobuf.DeleteElementRequest deleteElement = 7;
  bool has_deleteelement() const;
  private:
  bool _internal_has_deleteelement() const;

  public:
  void clear_deleteelement() ;
  const ::protobuf::DeleteElementRequest& deleteelement() const;
  PROTOBUF_NODISCARD ::protobuf::DeleteElementRequest* release_deleteelement();
  ::protobuf::DeleteElementRequest* mutable_deleteelement();
  void set_allocated_deleteelement(::protobuf::DeleteElementRequest* value);
  void unsafe_arena_set_allocated_deleteelement(::protobuf::DeleteElementRequest* value);
  ::protobuf::DeleteElementRequest* unsafe_arena_release_deleteelement();

  private:
  const ::protobuf::DeleteElementRequest& _internal_deleteelement() const;
  ::protobuf::DeleteElementRequest* _internal_mutable_deleteelement();

  public:
  // .protobuf.SaveWhiteboardRequest saveWhiteboard = 8;
  bool has_savewhiteboard() const;
  private:
  bool _internal_has_savewhiteboard() const;

  public:
  void clear_savewhiteboard() ;
  const ::protobuf::SaveWhiteboardRequest& savewhiteboard() const;
  PROTOBUF_NODISCARD ::protobuf::SaveWhiteboardRequest* release_savewhiteboard();
  ::protobuf::SaveWhiteboardRequest* mutable_savewhiteboard();
  void set_allocated_savewhiteboard(::protobuf::SaveWhiteboardRequest* value);
  void unsafe_arena_set_allocated_savewhiteboard(::protobuf::SaveWhiteboardRequest* value);
  ::protobuf::SaveWhiteboardRequest* unsafe_arena_release_savewhiteboard();

  private:
  const ::protobuf::SaveWhiteboardRequest& _internal_savewhiteboard() const;
  ::protobuf::SaveWhiteboardRequest* _internal_mutable_savewhiteboard();

  public:
  // .protobuf.RegisterRequest registerRequest = 9;
  bool has_registerrequest() const;
  private:
  bool _internal_has_registerrequest() const;

  public:
  void clear_registerrequest() ;
  const ::protobuf::RegisterRequest& registerrequest() const;
  PROTOBUF_NODISCARD ::protobuf::RegisterRequest* release_registerrequest();
  ::protobuf::RegisterRequest* mutable_registerrequest();
  void set_allocated_registerrequest(::protobuf::RegisterRequest* value);
  void unsafe_arena_set_allocated_registerrequest(::protobuf::RegisterRequest* value);
  ::protobuf::RegisterRequest* unsafe_arena_release_registerrequest();

  private:
  const ::protobuf::RegisterRequest& _internal_registerrequest() const;
  ::protobuf::RegisterRequest* _internal_mutable_registerrequest();

  public:
  // .protobuf.LoginRequest loginRequest = 10;
  bool has_loginrequest() const;
  private:
  bool _internal_has_loginrequest() const;

  public:
  void clear_loginrequest() ;
  const ::protobuf::LoginRequest& loginrequest() const;
  PROTOBUF_NODISCARD ::protobuf::LoginRequest* release_loginrequest();
  ::protobuf::LoginRequest* mutable_loginrequest();
  void set_allocated_loginrequest(::protobuf::LoginRequest* value);
  void unsafe_arena_set_allocated_loginrequest(::protobuf::LoginRequest* value);
  ::protobuf::LoginRequest* unsafe_arena_release_loginrequest();

  private:
  const ::protobuf::LoginRequest& _internal_loginrequest() const;
  ::protobuf::LoginRequest* _internal_mutable_loginrequest();

  public:
  // .protobuf.ActionResponse actionResponse = 11;
  bool has_actionresponse() const;
  private:
  bool _internal_has_actionresponse() const;

  public:
  void clear_actionresponse() ;
  const ::protobuf::ActionResponse& actionresponse() const;
  PROTOBUF_NODISCARD ::protobuf::ActionResponse* release_actionresponse();
  ::protobuf::ActionResponse* mutable_actionresponse();
  void set_allocated_actionresponse(::protobuf::ActionResponse* value);
  void unsafe_arena_set_allocated_actionresponse(::protobuf::ActionResponse* value);
  ::protobuf::ActionResponse* unsafe_arena_release_actionresponse();

  private:
  const ::protobuf::ActionResponse& _internal_actionresponse() const;
  ::protobuf::ActionResponse* _internal_mutable_actionresponse();

  public:
  // .protobuf.BroadCast broadcast = 12;
  bool has_broadcast() const;
  private:
  bool _internal_has_broadcast() const;

  public:
  void clear_broadcast() ;
  const ::protobuf::BroadCast& broadcast() const;
  PROTOBUF_NODISCARD ::protobuf::BroadCast* release_broadcast();
  ::protobuf::BroadCast* mutable_broadcast();
  void set_allocated_broadcast(::protobuf::BroadCast* value);
  void unsafe_arena_set_allocated_broadcast(::protobuf::BroadCast* value);
  ::protobuf::BroadCast* unsafe_arena_release_broadcast();

  private:
  const ::protobuf::BroadCast& _internal_broadcast() const;
  ::protobuf::BroadCast* _internal_mutable_broadcast();

  public:
  // .protobuf.TempIDResponse tempIdResponse = 13;
  bool has_tempidresponse() const;
  private:
  bool _internal_has_tempidresponse() const;

  public:
  void clear_tempidresponse() ;
  const ::protobuf::TempIDResponse& tempidresponse() const;
  PROTOBUF_NODISCARD ::protobuf::TempIDResponse* release_tempidresponse();
  ::protobuf::TempIDResponse* mutable_tempidresponse();
  void set_allocated_tempidresponse(::protobuf::TempIDResponse* value);
  void unsafe_arena_set_allocated_tempidresponse(::protobuf::TempIDResponse* value);
  ::protobuf::TempIDResponse* unsafe_arena_release_tempidresponse();

  private:
  const ::protobuf::TempIDResponse& _internal_tempidresponse() const;
  ::protobuf::TempIDResponse* _internal_mutable_tempidresponse();

  public:
  void clear_action_type();
  ActionTypeCase action_type_case() const;
  // @@protoc_insertion_point(class_scope:protobuf.PacketAction)
 private:
  class _Internal;
  void set_has_createwhiteboard();
  void set_has_createsession();
  void set_has_joinsession();
  void set_has_quitsession();
  void set_has_addelement();
  void set_has_modifyelement();
  void set_has_deleteelement();
  void set_has_savewhiteboard();
  void set_has_registerrequest();
  void set_has_loginrequest();
  void set_has_actionresponse();
  void set_has_broadcast();
  void set_has_tempidresponse();

  inline bool has_action_type() const;
  inline void clear_has_action_type();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 13, 13,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union ActionTypeUnion {
      constexpr ActionTypeUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::protobuf::CreateWhiteBoardRequest* createwhiteboard_;
      ::protobuf::CreateSessionRequest* createsession_;
      ::protobuf::JoinSessionRequest* joinsession_;
      ::protobuf::QuitSessionRequest* quitsession_;
      ::protobuf::AddElementRequest* addelement_;
      ::protobuf::ModifyElementRequest* modifyelement_;
      ::protobuf::DeleteElementRequest* deleteelement_;
      ::protobuf::SaveWhiteboardRequest* savewhiteboard_;
      ::protobuf::RegisterRequest* registerrequest_;
      ::protobuf::LoginRequest* loginrequest_;
      ::protobuf::ActionResponse* actionresponse_;
      ::protobuf::BroadCast* broadcast_;
      ::protobuf::TempIDResponse* tempidresponse_;
    } action_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_action_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CreateWhiteBoardRequest

// uint32 user_id = 1;
inline void CreateWhiteBoardRequest::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_ = 0u;
}
inline ::uint32_t CreateWhiteBoardRequest::user_id() const {
  // @@protoc_insertion_point(field_get:protobuf.CreateWhiteBoardRequest.user_id)
  return _internal_user_id();
}
inline void CreateWhiteBoardRequest::set_user_id(::uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protobuf.CreateWhiteBoardRequest.user_id)
}
inline ::uint32_t CreateWhiteBoardRequest::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void CreateWhiteBoardRequest::_internal_set_user_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// -------------------------------------------------------------------

// CreateSessionRequest

// uint32 user_id = 1;
inline void CreateSessionRequest::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_ = 0u;
}
inline ::uint32_t CreateSessionRequest::user_id() const {
  // @@protoc_insertion_point(field_get:protobuf.CreateSessionRequest.user_id)
  return _internal_user_id();
}
inline void CreateSessionRequest::set_user_id(::uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protobuf.CreateSessionRequest.user_id)
}
inline ::uint32_t CreateSessionRequest::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void CreateSessionRequest::_internal_set_user_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// string whiteboard_id = 2;
inline void CreateSessionRequest::clear_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.whiteboard_id_.ClearToEmpty();
}
inline const std::string& CreateSessionRequest::whiteboard_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.CreateSessionRequest.whiteboard_id)
  return _internal_whiteboard_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateSessionRequest::set_whiteboard_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.whiteboard_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.CreateSessionRequest.whiteboard_id)
}
inline std::string* CreateSessionRequest::mutable_whiteboard_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_whiteboard_id();
  // @@protoc_insertion_point(field_mutable:protobuf.CreateSessionRequest.whiteboard_id)
  return _s;
}
inline const std::string& CreateSessionRequest::_internal_whiteboard_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.whiteboard_id_.Get();
}
inline void CreateSessionRequest::_internal_set_whiteboard_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.whiteboard_id_.Set(value, GetArena());
}
inline std::string* CreateSessionRequest::_internal_mutable_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.whiteboard_id_.Mutable( GetArena());
}
inline std::string* CreateSessionRequest::release_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protobuf.CreateSessionRequest.whiteboard_id)
  return _impl_.whiteboard_id_.Release();
}
inline void CreateSessionRequest::set_allocated_whiteboard_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.whiteboard_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.whiteboard_id_.IsDefault()) {
          _impl_.whiteboard_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.CreateSessionRequest.whiteboard_id)
}

// -------------------------------------------------------------------

// JoinSessionRequest

// uint32 user_id = 1;
inline void JoinSessionRequest::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_ = 0u;
}
inline ::uint32_t JoinSessionRequest::user_id() const {
  // @@protoc_insertion_point(field_get:protobuf.JoinSessionRequest.user_id)
  return _internal_user_id();
}
inline void JoinSessionRequest::set_user_id(::uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protobuf.JoinSessionRequest.user_id)
}
inline ::uint32_t JoinSessionRequest::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void JoinSessionRequest::_internal_set_user_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// string whiteboard_id = 2;
inline void JoinSessionRequest::clear_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.whiteboard_id_.ClearToEmpty();
}
inline const std::string& JoinSessionRequest::whiteboard_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.JoinSessionRequest.whiteboard_id)
  return _internal_whiteboard_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinSessionRequest::set_whiteboard_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.whiteboard_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.JoinSessionRequest.whiteboard_id)
}
inline std::string* JoinSessionRequest::mutable_whiteboard_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_whiteboard_id();
  // @@protoc_insertion_point(field_mutable:protobuf.JoinSessionRequest.whiteboard_id)
  return _s;
}
inline const std::string& JoinSessionRequest::_internal_whiteboard_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.whiteboard_id_.Get();
}
inline void JoinSessionRequest::_internal_set_whiteboard_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.whiteboard_id_.Set(value, GetArena());
}
inline std::string* JoinSessionRequest::_internal_mutable_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.whiteboard_id_.Mutable( GetArena());
}
inline std::string* JoinSessionRequest::release_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protobuf.JoinSessionRequest.whiteboard_id)
  return _impl_.whiteboard_id_.Release();
}
inline void JoinSessionRequest::set_allocated_whiteboard_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.whiteboard_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.whiteboard_id_.IsDefault()) {
          _impl_.whiteboard_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.JoinSessionRequest.whiteboard_id)
}

// -------------------------------------------------------------------

// QuitSessionRequest

// uint32 user_id = 1;
inline void QuitSessionRequest::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_ = 0u;
}
inline ::uint32_t QuitSessionRequest::user_id() const {
  // @@protoc_insertion_point(field_get:protobuf.QuitSessionRequest.user_id)
  return _internal_user_id();
}
inline void QuitSessionRequest::set_user_id(::uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protobuf.QuitSessionRequest.user_id)
}
inline ::uint32_t QuitSessionRequest::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void QuitSessionRequest::_internal_set_user_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// string whiteboard_id = 2;
inline void QuitSessionRequest::clear_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.whiteboard_id_.ClearToEmpty();
}
inline const std::string& QuitSessionRequest::whiteboard_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.QuitSessionRequest.whiteboard_id)
  return _internal_whiteboard_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QuitSessionRequest::set_whiteboard_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.whiteboard_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.QuitSessionRequest.whiteboard_id)
}
inline std::string* QuitSessionRequest::mutable_whiteboard_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_whiteboard_id();
  // @@protoc_insertion_point(field_mutable:protobuf.QuitSessionRequest.whiteboard_id)
  return _s;
}
inline const std::string& QuitSessionRequest::_internal_whiteboard_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.whiteboard_id_.Get();
}
inline void QuitSessionRequest::_internal_set_whiteboard_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.whiteboard_id_.Set(value, GetArena());
}
inline std::string* QuitSessionRequest::_internal_mutable_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.whiteboard_id_.Mutable( GetArena());
}
inline std::string* QuitSessionRequest::release_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protobuf.QuitSessionRequest.whiteboard_id)
  return _impl_.whiteboard_id_.Release();
}
inline void QuitSessionRequest::set_allocated_whiteboard_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.whiteboard_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.whiteboard_id_.IsDefault()) {
          _impl_.whiteboard_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.QuitSessionRequest.whiteboard_id)
}

// -------------------------------------------------------------------

// AddElementRequest

// uint32 user_id = 1;
inline void AddElementRequest::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_ = 0u;
}
inline ::uint32_t AddElementRequest::user_id() const {
  // @@protoc_insertion_point(field_get:protobuf.AddElementRequest.user_id)
  return _internal_user_id();
}
inline void AddElementRequest::set_user_id(::uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protobuf.AddElementRequest.user_id)
}
inline ::uint32_t AddElementRequest::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void AddElementRequest::_internal_set_user_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// string whiteboard_id = 2;
inline void AddElementRequest::clear_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.whiteboard_id_.ClearToEmpty();
}
inline const std::string& AddElementRequest::whiteboard_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.AddElementRequest.whiteboard_id)
  return _internal_whiteboard_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddElementRequest::set_whiteboard_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.whiteboard_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.AddElementRequest.whiteboard_id)
}
inline std::string* AddElementRequest::mutable_whiteboard_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_whiteboard_id();
  // @@protoc_insertion_point(field_mutable:protobuf.AddElementRequest.whiteboard_id)
  return _s;
}
inline const std::string& AddElementRequest::_internal_whiteboard_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.whiteboard_id_.Get();
}
inline void AddElementRequest::_internal_set_whiteboard_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.whiteboard_id_.Set(value, GetArena());
}
inline std::string* AddElementRequest::_internal_mutable_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.whiteboard_id_.Mutable( GetArena());
}
inline std::string* AddElementRequest::release_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protobuf.AddElementRequest.whiteboard_id)
  return _impl_.whiteboard_id_.Release();
}
inline void AddElementRequest::set_allocated_whiteboard_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.whiteboard_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.whiteboard_id_.IsDefault()) {
          _impl_.whiteboard_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.AddElementRequest.whiteboard_id)
}

// .protobuf.Element element = 3;
inline bool AddElementRequest::has_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_ != nullptr);
  return value;
}
inline const ::protobuf::Element& AddElementRequest::_internal_element() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::protobuf::Element* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::Element&>(::protobuf::_Element_default_instance_);
}
inline const ::protobuf::Element& AddElementRequest::element() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.AddElementRequest.element)
  return _internal_element();
}
inline void AddElementRequest::unsafe_arena_set_allocated_element(::protobuf::Element* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = reinterpret_cast<::protobuf::Element*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.AddElementRequest.element)
}
inline ::protobuf::Element* AddElementRequest::release_element() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protobuf::Element* released = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protobuf::Element* AddElementRequest::unsafe_arena_release_element() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protobuf.AddElementRequest.element)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protobuf::Element* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::protobuf::Element* AddElementRequest::_internal_mutable_element() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::Element>(GetArena());
    _impl_.element_ = reinterpret_cast<::protobuf::Element*>(p);
  }
  return _impl_.element_;
}
inline ::protobuf::Element* AddElementRequest::mutable_element() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protobuf::Element* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:protobuf.AddElementRequest.element)
  return _msg;
}
inline void AddElementRequest::set_allocated_element(::protobuf::Element* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.element_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.element_ = reinterpret_cast<::protobuf::Element*>(value);
  // @@protoc_insertion_point(field_set_allocated:protobuf.AddElementRequest.element)
}

// -------------------------------------------------------------------

// ModifyElementRequest

// uint32 user_id = 1;
inline void ModifyElementRequest::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_ = 0u;
}
inline ::uint32_t ModifyElementRequest::user_id() const {
  // @@protoc_insertion_point(field_get:protobuf.ModifyElementRequest.user_id)
  return _internal_user_id();
}
inline void ModifyElementRequest::set_user_id(::uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protobuf.ModifyElementRequest.user_id)
}
inline ::uint32_t ModifyElementRequest::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void ModifyElementRequest::_internal_set_user_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// string whiteboard_id = 2;
inline void ModifyElementRequest::clear_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.whiteboard_id_.ClearToEmpty();
}
inline const std::string& ModifyElementRequest::whiteboard_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.ModifyElementRequest.whiteboard_id)
  return _internal_whiteboard_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModifyElementRequest::set_whiteboard_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.whiteboard_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.ModifyElementRequest.whiteboard_id)
}
inline std::string* ModifyElementRequest::mutable_whiteboard_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_whiteboard_id();
  // @@protoc_insertion_point(field_mutable:protobuf.ModifyElementRequest.whiteboard_id)
  return _s;
}
inline const std::string& ModifyElementRequest::_internal_whiteboard_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.whiteboard_id_.Get();
}
inline void ModifyElementRequest::_internal_set_whiteboard_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.whiteboard_id_.Set(value, GetArena());
}
inline std::string* ModifyElementRequest::_internal_mutable_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.whiteboard_id_.Mutable( GetArena());
}
inline std::string* ModifyElementRequest::release_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protobuf.ModifyElementRequest.whiteboard_id)
  return _impl_.whiteboard_id_.Release();
}
inline void ModifyElementRequest::set_allocated_whiteboard_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.whiteboard_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.whiteboard_id_.IsDefault()) {
          _impl_.whiteboard_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.ModifyElementRequest.whiteboard_id)
}

// .protobuf.Element orig_element = 3;
inline bool ModifyElementRequest::has_orig_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orig_element_ != nullptr);
  return value;
}
inline const ::protobuf::Element& ModifyElementRequest::_internal_orig_element() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::protobuf::Element* p = _impl_.orig_element_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::Element&>(::protobuf::_Element_default_instance_);
}
inline const ::protobuf::Element& ModifyElementRequest::orig_element() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.ModifyElementRequest.orig_element)
  return _internal_orig_element();
}
inline void ModifyElementRequest::unsafe_arena_set_allocated_orig_element(::protobuf::Element* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orig_element_);
  }
  _impl_.orig_element_ = reinterpret_cast<::protobuf::Element*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ModifyElementRequest.orig_element)
}
inline ::protobuf::Element* ModifyElementRequest::release_orig_element() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protobuf::Element* released = _impl_.orig_element_;
  _impl_.orig_element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protobuf::Element* ModifyElementRequest::unsafe_arena_release_orig_element() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protobuf.ModifyElementRequest.orig_element)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protobuf::Element* temp = _impl_.orig_element_;
  _impl_.orig_element_ = nullptr;
  return temp;
}
inline ::protobuf::Element* ModifyElementRequest::_internal_mutable_orig_element() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.orig_element_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::Element>(GetArena());
    _impl_.orig_element_ = reinterpret_cast<::protobuf::Element*>(p);
  }
  return _impl_.orig_element_;
}
inline ::protobuf::Element* ModifyElementRequest::mutable_orig_element() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protobuf::Element* _msg = _internal_mutable_orig_element();
  // @@protoc_insertion_point(field_mutable:protobuf.ModifyElementRequest.orig_element)
  return _msg;
}
inline void ModifyElementRequest::set_allocated_orig_element(::protobuf::Element* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orig_element_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.orig_element_ = reinterpret_cast<::protobuf::Element*>(value);
  // @@protoc_insertion_point(field_set_allocated:protobuf.ModifyElementRequest.orig_element)
}

// .protobuf.Element modi_element = 4;
inline bool ModifyElementRequest::has_modi_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.modi_element_ != nullptr);
  return value;
}
inline const ::protobuf::Element& ModifyElementRequest::_internal_modi_element() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::protobuf::Element* p = _impl_.modi_element_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::Element&>(::protobuf::_Element_default_instance_);
}
inline const ::protobuf::Element& ModifyElementRequest::modi_element() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.ModifyElementRequest.modi_element)
  return _internal_modi_element();
}
inline void ModifyElementRequest::unsafe_arena_set_allocated_modi_element(::protobuf::Element* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.modi_element_);
  }
  _impl_.modi_element_ = reinterpret_cast<::protobuf::Element*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.ModifyElementRequest.modi_element)
}
inline ::protobuf::Element* ModifyElementRequest::release_modi_element() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::protobuf::Element* released = _impl_.modi_element_;
  _impl_.modi_element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protobuf::Element* ModifyElementRequest::unsafe_arena_release_modi_element() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protobuf.ModifyElementRequest.modi_element)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::protobuf::Element* temp = _impl_.modi_element_;
  _impl_.modi_element_ = nullptr;
  return temp;
}
inline ::protobuf::Element* ModifyElementRequest::_internal_mutable_modi_element() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.modi_element_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::Element>(GetArena());
    _impl_.modi_element_ = reinterpret_cast<::protobuf::Element*>(p);
  }
  return _impl_.modi_element_;
}
inline ::protobuf::Element* ModifyElementRequest::mutable_modi_element() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protobuf::Element* _msg = _internal_mutable_modi_element();
  // @@protoc_insertion_point(field_mutable:protobuf.ModifyElementRequest.modi_element)
  return _msg;
}
inline void ModifyElementRequest::set_allocated_modi_element(::protobuf::Element* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.modi_element_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.modi_element_ = reinterpret_cast<::protobuf::Element*>(value);
  // @@protoc_insertion_point(field_set_allocated:protobuf.ModifyElementRequest.modi_element)
}

// -------------------------------------------------------------------

// DeleteElementRequest

// uint32 user_id = 1;
inline void DeleteElementRequest::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_ = 0u;
}
inline ::uint32_t DeleteElementRequest::user_id() const {
  // @@protoc_insertion_point(field_get:protobuf.DeleteElementRequest.user_id)
  return _internal_user_id();
}
inline void DeleteElementRequest::set_user_id(::uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protobuf.DeleteElementRequest.user_id)
}
inline ::uint32_t DeleteElementRequest::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void DeleteElementRequest::_internal_set_user_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// string whiteboard_id = 2;
inline void DeleteElementRequest::clear_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.whiteboard_id_.ClearToEmpty();
}
inline const std::string& DeleteElementRequest::whiteboard_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.DeleteElementRequest.whiteboard_id)
  return _internal_whiteboard_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteElementRequest::set_whiteboard_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.whiteboard_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.DeleteElementRequest.whiteboard_id)
}
inline std::string* DeleteElementRequest::mutable_whiteboard_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_whiteboard_id();
  // @@protoc_insertion_point(field_mutable:protobuf.DeleteElementRequest.whiteboard_id)
  return _s;
}
inline const std::string& DeleteElementRequest::_internal_whiteboard_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.whiteboard_id_.Get();
}
inline void DeleteElementRequest::_internal_set_whiteboard_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.whiteboard_id_.Set(value, GetArena());
}
inline std::string* DeleteElementRequest::_internal_mutable_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.whiteboard_id_.Mutable( GetArena());
}
inline std::string* DeleteElementRequest::release_whiteboard_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protobuf.DeleteElementRequest.whiteboard_id)
  return _impl_.whiteboard_id_.Release();
}
inline void DeleteElementRequest::set_allocated_whiteboard_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.whiteboard_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.whiteboard_id_.IsDefault()) {
          _impl_.whiteboard_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.DeleteElementRequest.whiteboard_id)
}

// .protobuf.Element orig_element = 3;
inline bool DeleteElementRequest::has_orig_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orig_element_ != nullptr);
  return value;
}
inline const ::protobuf::Element& DeleteElementRequest::_internal_orig_element() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::protobuf::Element* p = _impl_.orig_element_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf::Element&>(::protobuf::_Element_default_instance_);
}
inline const ::protobuf::Element& DeleteElementRequest::orig_element() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.DeleteElementRequest.orig_element)
  return _internal_orig_element();
}
inline void DeleteElementRequest::unsafe_arena_set_allocated_orig_element(::protobuf::Element* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orig_element_);
  }
  _impl_.orig_element_ = reinterpret_cast<::protobuf::Element*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.DeleteElementRequest.orig_element)
}
inline ::protobuf::Element* DeleteElementRequest::release_orig_element() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protobuf::Element* released = _impl_.orig_element_;
  _impl_.orig_element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protobuf::Element* DeleteElementRequest::unsafe_arena_release_orig_element() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protobuf.DeleteElementRequest.orig_element)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protobuf::Element* temp = _impl_.orig_element_;
  _impl_.orig_element_ = nullptr;
  return temp;
}
inline ::protobuf::Element* DeleteElementRequest::_internal_mutable_orig_element() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.orig_element_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf::Element>(GetArena());
    _impl_.orig_element_ = reinterpret_cast<::protobuf::Element*>(p);
  }
  return _impl_.orig_element_;
}
inline ::protobuf::Element* DeleteElementRequest::mutable_orig_element() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protobuf::Element* _msg = _internal_mutable_orig_element();
  // @@protoc_insertion_point(field_mutable:protobuf.DeleteElementRequest.orig_element)
  return _msg;
}
inline void DeleteElementRequest::set_allocated_orig_element(::protobuf::Element* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orig_element_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.orig_element_ = reinterpret_cast<::protobuf::Element*>(value);
  // @@protoc_insertion_point(field_set_allocated:protobuf.DeleteElementRequest.orig_element)
}

// -------------------------------------------------------------------

// SaveWhiteboardRequest

// uint32 session_id = 1;
inline void SaveWhiteboardRequest::clear_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_ = 0u;
}
inline ::uint32_t SaveWhiteboardRequest::session_id() const {
  // @@protoc_insertion_point(field_get:protobuf.SaveWhiteboardRequest.session_id)
  return _internal_session_id();
}
inline void SaveWhiteboardRequest::set_session_id(::uint32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:protobuf.SaveWhiteboardRequest.session_id)
}
inline ::uint32_t SaveWhiteboardRequest::_internal_session_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.session_id_;
}
inline void SaveWhiteboardRequest::_internal_set_session_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_ = value;
}

// string file_format = 2;
inline void SaveWhiteboardRequest::clear_file_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_format_.ClearToEmpty();
}
inline const std::string& SaveWhiteboardRequest::file_format() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.SaveWhiteboardRequest.file_format)
  return _internal_file_format();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveWhiteboardRequest::set_file_format(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.file_format_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.SaveWhiteboardRequest.file_format)
}
inline std::string* SaveWhiteboardRequest::mutable_file_format() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_format();
  // @@protoc_insertion_point(field_mutable:protobuf.SaveWhiteboardRequest.file_format)
  return _s;
}
inline const std::string& SaveWhiteboardRequest::_internal_file_format() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.file_format_.Get();
}
inline void SaveWhiteboardRequest::_internal_set_file_format(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.file_format_.Set(value, GetArena());
}
inline std::string* SaveWhiteboardRequest::_internal_mutable_file_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.file_format_.Mutable( GetArena());
}
inline std::string* SaveWhiteboardRequest::release_file_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protobuf.SaveWhiteboardRequest.file_format)
  return _impl_.file_format_.Release();
}
inline void SaveWhiteboardRequest::set_allocated_file_format(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_format_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_format_.IsDefault()) {
          _impl_.file_format_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.SaveWhiteboardRequest.file_format)
}

// string file_path = 3;
inline void SaveWhiteboardRequest::clear_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_path_.ClearToEmpty();
}
inline const std::string& SaveWhiteboardRequest::file_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.SaveWhiteboardRequest.file_path)
  return _internal_file_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveWhiteboardRequest::set_file_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.file_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.SaveWhiteboardRequest.file_path)
}
inline std::string* SaveWhiteboardRequest::mutable_file_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:protobuf.SaveWhiteboardRequest.file_path)
  return _s;
}
inline const std::string& SaveWhiteboardRequest::_internal_file_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.file_path_.Get();
}
inline void SaveWhiteboardRequest::_internal_set_file_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.file_path_.Set(value, GetArena());
}
inline std::string* SaveWhiteboardRequest::_internal_mutable_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.file_path_.Mutable( GetArena());
}
inline std::string* SaveWhiteboardRequest::release_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protobuf.SaveWhiteboardRequest.file_path)
  return _impl_.file_path_.Release();
}
inline void SaveWhiteboardRequest::set_allocated_file_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_path_.IsDefault()) {
          _impl_.file_path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.SaveWhiteboardRequest.file_path)
}

// -------------------------------------------------------------------

// RegisterResponse

// bool success = 1;
inline void RegisterResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool RegisterResponse::success() const {
  // @@protoc_insertion_point(field_get:protobuf.RegisterResponse.success)
  return _internal_success();
}
inline void RegisterResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:protobuf.RegisterResponse.success)
}
inline bool RegisterResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void RegisterResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// uint32 uid = 2;
inline void RegisterResponse::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_ = 0u;
}
inline ::uint32_t RegisterResponse::uid() const {
  // @@protoc_insertion_point(field_get:protobuf.RegisterResponse.uid)
  return _internal_uid();
}
inline void RegisterResponse::set_uid(::uint32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:protobuf.RegisterResponse.uid)
}
inline ::uint32_t RegisterResponse::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_;
}
inline void RegisterResponse::_internal_set_uid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_ = value;
}

// -------------------------------------------------------------------

// LoginResponse

// bool success = 1;
inline void LoginResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool LoginResponse::success() const {
  // @@protoc_insertion_point(field_get:protobuf.LoginResponse.success)
  return _internal_success();
}
inline void LoginResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:protobuf.LoginResponse.success)
}
inline bool LoginResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void LoginResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// uint32 uid = 2;
inline void LoginResponse::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_ = 0u;
}
inline ::uint32_t LoginResponse::uid() const {
  // @@protoc_insertion_point(field_get:protobuf.LoginResponse.uid)
  return _internal_uid();
}
inline void LoginResponse::set_uid(::uint32_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:protobuf.LoginResponse.uid)
}
inline ::uint32_t LoginResponse::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_;
}
inline void LoginResponse::_internal_set_uid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_ = value;
}

// -------------------------------------------------------------------

// ActionResponse

// bool success = 1;
inline void ActionResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool ActionResponse::success() const {
  // @@protoc_insertion_point(field_get:protobuf.ActionResponse.success)
  return _internal_success();
}
inline void ActionResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:protobuf.ActionResponse.success)
}
inline bool ActionResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void ActionResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// string message = 2;
inline void ActionResponse::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ActionResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.ActionResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActionResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.ActionResponse.message)
}
inline std::string* ActionResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:protobuf.ActionResponse.message)
  return _s;
}
inline const std::string& ActionResponse::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void ActionResponse::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ActionResponse::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ActionResponse::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protobuf.ActionResponse.message)
  return _impl_.message_.Release();
}
inline void ActionResponse::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.ActionResponse.message)
}

// -------------------------------------------------------------------

// BroadCast

// repeated .protobuf.Element elements = 1;
inline int BroadCast::_internal_elements_size() const {
  return _internal_elements().size();
}
inline int BroadCast::elements_size() const {
  return _internal_elements_size();
}
inline ::protobuf::Element* BroadCast::mutable_elements(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:protobuf.BroadCast.elements)
  return _internal_mutable_elements()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::protobuf::Element>* BroadCast::mutable_elements()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:protobuf.BroadCast.elements)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_elements();
}
inline const ::protobuf::Element& BroadCast::elements(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.BroadCast.elements)
  return _internal_elements().Get(index);
}
inline ::protobuf::Element* BroadCast::add_elements() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::protobuf::Element* _add = _internal_mutable_elements()->Add();
  // @@protoc_insertion_point(field_add:protobuf.BroadCast.elements)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::protobuf::Element>& BroadCast::elements() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:protobuf.BroadCast.elements)
  return _internal_elements();
}
inline const ::google::protobuf::RepeatedPtrField<::protobuf::Element>&
BroadCast::_internal_elements() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.elements_;
}
inline ::google::protobuf::RepeatedPtrField<::protobuf::Element>*
BroadCast::_internal_mutable_elements() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.elements_;
}

// -------------------------------------------------------------------

// TempIDResponse

// bool success = 1;
inline void TempIDResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool TempIDResponse::success() const {
  // @@protoc_insertion_point(field_get:protobuf.TempIDResponse.success)
  return _internal_success();
}
inline void TempIDResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:protobuf.TempIDResponse.success)
}
inline bool TempIDResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void TempIDResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// uint32 user_id = 2;
inline void TempIDResponse::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_ = 0u;
}
inline ::uint32_t TempIDResponse::user_id() const {
  // @@protoc_insertion_point(field_get:protobuf.TempIDResponse.user_id)
  return _internal_user_id();
}
inline void TempIDResponse::set_user_id(::uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protobuf.TempIDResponse.user_id)
}
inline ::uint32_t TempIDResponse::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void TempIDResponse::_internal_set_user_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// -------------------------------------------------------------------

// RegisterRequest

// uint32 user_id = 1;
inline void RegisterRequest::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_ = 0u;
}
inline ::uint32_t RegisterRequest::user_id() const {
  // @@protoc_insertion_point(field_get:protobuf.RegisterRequest.user_id)
  return _internal_user_id();
}
inline void RegisterRequest::set_user_id(::uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protobuf.RegisterRequest.user_id)
}
inline ::uint32_t RegisterRequest::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void RegisterRequest::_internal_set_user_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// string username = 2;
inline void RegisterRequest::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& RegisterRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.RegisterRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.RegisterRequest.username)
}
inline std::string* RegisterRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:protobuf.RegisterRequest.username)
  return _s;
}
inline const std::string& RegisterRequest::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void RegisterRequest::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(value, GetArena());
}
inline std::string* RegisterRequest::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* RegisterRequest::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protobuf.RegisterRequest.username)
  return _impl_.username_.Release();
}
inline void RegisterRequest::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.RegisterRequest.username)
}

// string password_hash = 3;
inline void RegisterRequest::clear_password_hash() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_hash_.ClearToEmpty();
}
inline const std::string& RegisterRequest::password_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.RegisterRequest.password_hash)
  return _internal_password_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterRequest::set_password_hash(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.RegisterRequest.password_hash)
}
inline std::string* RegisterRequest::mutable_password_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password_hash();
  // @@protoc_insertion_point(field_mutable:protobuf.RegisterRequest.password_hash)
  return _s;
}
inline const std::string& RegisterRequest::_internal_password_hash() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_hash_.Get();
}
inline void RegisterRequest::_internal_set_password_hash(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_hash_.Set(value, GetArena());
}
inline std::string* RegisterRequest::_internal_mutable_password_hash() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.password_hash_.Mutable( GetArena());
}
inline std::string* RegisterRequest::release_password_hash() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protobuf.RegisterRequest.password_hash)
  return _impl_.password_hash_.Release();
}
inline void RegisterRequest::set_allocated_password_hash(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_hash_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_hash_.IsDefault()) {
          _impl_.password_hash_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.RegisterRequest.password_hash)
}

// -------------------------------------------------------------------

// LoginRequest

// uint32 user_id = 1;
inline void LoginRequest::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_ = 0u;
}
inline ::uint32_t LoginRequest::user_id() const {
  // @@protoc_insertion_point(field_get:protobuf.LoginRequest.user_id)
  return _internal_user_id();
}
inline void LoginRequest::set_user_id(::uint32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:protobuf.LoginRequest.user_id)
}
inline ::uint32_t LoginRequest::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_;
}
inline void LoginRequest::_internal_set_user_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_ = value;
}

// string username = 2;
inline void LoginRequest::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& LoginRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.LoginRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.LoginRequest.username)
}
inline std::string* LoginRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:protobuf.LoginRequest.username)
  return _s;
}
inline const std::string& LoginRequest::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void LoginRequest::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(value, GetArena());
}
inline std::string* LoginRequest::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* LoginRequest::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protobuf.LoginRequest.username)
  return _impl_.username_.Release();
}
inline void LoginRequest::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.LoginRequest.username)
}

// string password_hash = 3;
inline void LoginRequest::clear_password_hash() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_hash_.ClearToEmpty();
}
inline const std::string& LoginRequest::password_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.LoginRequest.password_hash)
  return _internal_password_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRequest::set_password_hash(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protobuf.LoginRequest.password_hash)
}
inline std::string* LoginRequest::mutable_password_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password_hash();
  // @@protoc_insertion_point(field_mutable:protobuf.LoginRequest.password_hash)
  return _s;
}
inline const std::string& LoginRequest::_internal_password_hash() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_hash_.Get();
}
inline void LoginRequest::_internal_set_password_hash(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_hash_.Set(value, GetArena());
}
inline std::string* LoginRequest::_internal_mutable_password_hash() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.password_hash_.Mutable( GetArena());
}
inline std::string* LoginRequest::release_password_hash() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protobuf.LoginRequest.password_hash)
  return _impl_.password_hash_.Release();
}
inline void LoginRequest::set_allocated_password_hash(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_hash_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_hash_.IsDefault()) {
          _impl_.password_hash_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf.LoginRequest.password_hash)
}

// -------------------------------------------------------------------

// PacketAction

// .protobuf.CreateWhiteBoardRequest createWhiteBoard = 1;
inline bool PacketAction::has_createwhiteboard() const {
  return action_type_case() == kCreateWhiteBoard;
}
inline bool PacketAction::_internal_has_createwhiteboard() const {
  return action_type_case() == kCreateWhiteBoard;
}
inline void PacketAction::set_has_createwhiteboard() {
  _impl_._oneof_case_[0] = kCreateWhiteBoard;
}
inline void PacketAction::clear_createwhiteboard() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (action_type_case() == kCreateWhiteBoard) {
    if (GetArena() == nullptr) {
      delete _impl_.action_type_.createwhiteboard_;
    }
    clear_has_action_type();
  }
}
inline ::protobuf::CreateWhiteBoardRequest* PacketAction::release_createwhiteboard() {
  // @@protoc_insertion_point(field_release:protobuf.PacketAction.createWhiteBoard)
  if (action_type_case() == kCreateWhiteBoard) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.createwhiteboard_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.action_type_.createwhiteboard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf::CreateWhiteBoardRequest& PacketAction::_internal_createwhiteboard() const {
  return action_type_case() == kCreateWhiteBoard ? *_impl_.action_type_.createwhiteboard_ : reinterpret_cast<::protobuf::CreateWhiteBoardRequest&>(::protobuf::_CreateWhiteBoardRequest_default_instance_);
}
inline const ::protobuf::CreateWhiteBoardRequest& PacketAction::createwhiteboard() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.PacketAction.createWhiteBoard)
  return _internal_createwhiteboard();
}
inline ::protobuf::CreateWhiteBoardRequest* PacketAction::unsafe_arena_release_createwhiteboard() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.PacketAction.createWhiteBoard)
  if (action_type_case() == kCreateWhiteBoard) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.createwhiteboard_;
    _impl_.action_type_.createwhiteboard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketAction::unsafe_arena_set_allocated_createwhiteboard(::protobuf::CreateWhiteBoardRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_action_type();
  if (value) {
    set_has_createwhiteboard();
    _impl_.action_type_.createwhiteboard_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PacketAction.createWhiteBoard)
}
inline ::protobuf::CreateWhiteBoardRequest* PacketAction::_internal_mutable_createwhiteboard() {
  if (action_type_case() != kCreateWhiteBoard) {
    clear_action_type();
    set_has_createwhiteboard();
    _impl_.action_type_.createwhiteboard_ = CreateMaybeMessage<::protobuf::CreateWhiteBoardRequest>(GetArena());
  }
  return _impl_.action_type_.createwhiteboard_;
}
inline ::protobuf::CreateWhiteBoardRequest* PacketAction::mutable_createwhiteboard() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protobuf::CreateWhiteBoardRequest* _msg = _internal_mutable_createwhiteboard();
  // @@protoc_insertion_point(field_mutable:protobuf.PacketAction.createWhiteBoard)
  return _msg;
}

// .protobuf.CreateSessionRequest createSession = 2;
inline bool PacketAction::has_createsession() const {
  return action_type_case() == kCreateSession;
}
inline bool PacketAction::_internal_has_createsession() const {
  return action_type_case() == kCreateSession;
}
inline void PacketAction::set_has_createsession() {
  _impl_._oneof_case_[0] = kCreateSession;
}
inline void PacketAction::clear_createsession() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (action_type_case() == kCreateSession) {
    if (GetArena() == nullptr) {
      delete _impl_.action_type_.createsession_;
    }
    clear_has_action_type();
  }
}
inline ::protobuf::CreateSessionRequest* PacketAction::release_createsession() {
  // @@protoc_insertion_point(field_release:protobuf.PacketAction.createSession)
  if (action_type_case() == kCreateSession) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.createsession_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.action_type_.createsession_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf::CreateSessionRequest& PacketAction::_internal_createsession() const {
  return action_type_case() == kCreateSession ? *_impl_.action_type_.createsession_ : reinterpret_cast<::protobuf::CreateSessionRequest&>(::protobuf::_CreateSessionRequest_default_instance_);
}
inline const ::protobuf::CreateSessionRequest& PacketAction::createsession() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.PacketAction.createSession)
  return _internal_createsession();
}
inline ::protobuf::CreateSessionRequest* PacketAction::unsafe_arena_release_createsession() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.PacketAction.createSession)
  if (action_type_case() == kCreateSession) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.createsession_;
    _impl_.action_type_.createsession_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketAction::unsafe_arena_set_allocated_createsession(::protobuf::CreateSessionRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_action_type();
  if (value) {
    set_has_createsession();
    _impl_.action_type_.createsession_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PacketAction.createSession)
}
inline ::protobuf::CreateSessionRequest* PacketAction::_internal_mutable_createsession() {
  if (action_type_case() != kCreateSession) {
    clear_action_type();
    set_has_createsession();
    _impl_.action_type_.createsession_ = CreateMaybeMessage<::protobuf::CreateSessionRequest>(GetArena());
  }
  return _impl_.action_type_.createsession_;
}
inline ::protobuf::CreateSessionRequest* PacketAction::mutable_createsession() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protobuf::CreateSessionRequest* _msg = _internal_mutable_createsession();
  // @@protoc_insertion_point(field_mutable:protobuf.PacketAction.createSession)
  return _msg;
}

// .protobuf.JoinSessionRequest joinSession = 3;
inline bool PacketAction::has_joinsession() const {
  return action_type_case() == kJoinSession;
}
inline bool PacketAction::_internal_has_joinsession() const {
  return action_type_case() == kJoinSession;
}
inline void PacketAction::set_has_joinsession() {
  _impl_._oneof_case_[0] = kJoinSession;
}
inline void PacketAction::clear_joinsession() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (action_type_case() == kJoinSession) {
    if (GetArena() == nullptr) {
      delete _impl_.action_type_.joinsession_;
    }
    clear_has_action_type();
  }
}
inline ::protobuf::JoinSessionRequest* PacketAction::release_joinsession() {
  // @@protoc_insertion_point(field_release:protobuf.PacketAction.joinSession)
  if (action_type_case() == kJoinSession) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.joinsession_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.action_type_.joinsession_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf::JoinSessionRequest& PacketAction::_internal_joinsession() const {
  return action_type_case() == kJoinSession ? *_impl_.action_type_.joinsession_ : reinterpret_cast<::protobuf::JoinSessionRequest&>(::protobuf::_JoinSessionRequest_default_instance_);
}
inline const ::protobuf::JoinSessionRequest& PacketAction::joinsession() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.PacketAction.joinSession)
  return _internal_joinsession();
}
inline ::protobuf::JoinSessionRequest* PacketAction::unsafe_arena_release_joinsession() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.PacketAction.joinSession)
  if (action_type_case() == kJoinSession) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.joinsession_;
    _impl_.action_type_.joinsession_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketAction::unsafe_arena_set_allocated_joinsession(::protobuf::JoinSessionRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_action_type();
  if (value) {
    set_has_joinsession();
    _impl_.action_type_.joinsession_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PacketAction.joinSession)
}
inline ::protobuf::JoinSessionRequest* PacketAction::_internal_mutable_joinsession() {
  if (action_type_case() != kJoinSession) {
    clear_action_type();
    set_has_joinsession();
    _impl_.action_type_.joinsession_ = CreateMaybeMessage<::protobuf::JoinSessionRequest>(GetArena());
  }
  return _impl_.action_type_.joinsession_;
}
inline ::protobuf::JoinSessionRequest* PacketAction::mutable_joinsession() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protobuf::JoinSessionRequest* _msg = _internal_mutable_joinsession();
  // @@protoc_insertion_point(field_mutable:protobuf.PacketAction.joinSession)
  return _msg;
}

// .protobuf.QuitSessionRequest quitSession = 4;
inline bool PacketAction::has_quitsession() const {
  return action_type_case() == kQuitSession;
}
inline bool PacketAction::_internal_has_quitsession() const {
  return action_type_case() == kQuitSession;
}
inline void PacketAction::set_has_quitsession() {
  _impl_._oneof_case_[0] = kQuitSession;
}
inline void PacketAction::clear_quitsession() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (action_type_case() == kQuitSession) {
    if (GetArena() == nullptr) {
      delete _impl_.action_type_.quitsession_;
    }
    clear_has_action_type();
  }
}
inline ::protobuf::QuitSessionRequest* PacketAction::release_quitsession() {
  // @@protoc_insertion_point(field_release:protobuf.PacketAction.quitSession)
  if (action_type_case() == kQuitSession) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.quitsession_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.action_type_.quitsession_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf::QuitSessionRequest& PacketAction::_internal_quitsession() const {
  return action_type_case() == kQuitSession ? *_impl_.action_type_.quitsession_ : reinterpret_cast<::protobuf::QuitSessionRequest&>(::protobuf::_QuitSessionRequest_default_instance_);
}
inline const ::protobuf::QuitSessionRequest& PacketAction::quitsession() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.PacketAction.quitSession)
  return _internal_quitsession();
}
inline ::protobuf::QuitSessionRequest* PacketAction::unsafe_arena_release_quitsession() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.PacketAction.quitSession)
  if (action_type_case() == kQuitSession) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.quitsession_;
    _impl_.action_type_.quitsession_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketAction::unsafe_arena_set_allocated_quitsession(::protobuf::QuitSessionRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_action_type();
  if (value) {
    set_has_quitsession();
    _impl_.action_type_.quitsession_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PacketAction.quitSession)
}
inline ::protobuf::QuitSessionRequest* PacketAction::_internal_mutable_quitsession() {
  if (action_type_case() != kQuitSession) {
    clear_action_type();
    set_has_quitsession();
    _impl_.action_type_.quitsession_ = CreateMaybeMessage<::protobuf::QuitSessionRequest>(GetArena());
  }
  return _impl_.action_type_.quitsession_;
}
inline ::protobuf::QuitSessionRequest* PacketAction::mutable_quitsession() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protobuf::QuitSessionRequest* _msg = _internal_mutable_quitsession();
  // @@protoc_insertion_point(field_mutable:protobuf.PacketAction.quitSession)
  return _msg;
}

// .protobuf.AddElementRequest addElement = 5;
inline bool PacketAction::has_addelement() const {
  return action_type_case() == kAddElement;
}
inline bool PacketAction::_internal_has_addelement() const {
  return action_type_case() == kAddElement;
}
inline void PacketAction::set_has_addelement() {
  _impl_._oneof_case_[0] = kAddElement;
}
inline void PacketAction::clear_addelement() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (action_type_case() == kAddElement) {
    if (GetArena() == nullptr) {
      delete _impl_.action_type_.addelement_;
    }
    clear_has_action_type();
  }
}
inline ::protobuf::AddElementRequest* PacketAction::release_addelement() {
  // @@protoc_insertion_point(field_release:protobuf.PacketAction.addElement)
  if (action_type_case() == kAddElement) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.addelement_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.action_type_.addelement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf::AddElementRequest& PacketAction::_internal_addelement() const {
  return action_type_case() == kAddElement ? *_impl_.action_type_.addelement_ : reinterpret_cast<::protobuf::AddElementRequest&>(::protobuf::_AddElementRequest_default_instance_);
}
inline const ::protobuf::AddElementRequest& PacketAction::addelement() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.PacketAction.addElement)
  return _internal_addelement();
}
inline ::protobuf::AddElementRequest* PacketAction::unsafe_arena_release_addelement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.PacketAction.addElement)
  if (action_type_case() == kAddElement) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.addelement_;
    _impl_.action_type_.addelement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketAction::unsafe_arena_set_allocated_addelement(::protobuf::AddElementRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_action_type();
  if (value) {
    set_has_addelement();
    _impl_.action_type_.addelement_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PacketAction.addElement)
}
inline ::protobuf::AddElementRequest* PacketAction::_internal_mutable_addelement() {
  if (action_type_case() != kAddElement) {
    clear_action_type();
    set_has_addelement();
    _impl_.action_type_.addelement_ = CreateMaybeMessage<::protobuf::AddElementRequest>(GetArena());
  }
  return _impl_.action_type_.addelement_;
}
inline ::protobuf::AddElementRequest* PacketAction::mutable_addelement() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protobuf::AddElementRequest* _msg = _internal_mutable_addelement();
  // @@protoc_insertion_point(field_mutable:protobuf.PacketAction.addElement)
  return _msg;
}

// .protobuf.ModifyElementRequest modifyElement = 6;
inline bool PacketAction::has_modifyelement() const {
  return action_type_case() == kModifyElement;
}
inline bool PacketAction::_internal_has_modifyelement() const {
  return action_type_case() == kModifyElement;
}
inline void PacketAction::set_has_modifyelement() {
  _impl_._oneof_case_[0] = kModifyElement;
}
inline void PacketAction::clear_modifyelement() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (action_type_case() == kModifyElement) {
    if (GetArena() == nullptr) {
      delete _impl_.action_type_.modifyelement_;
    }
    clear_has_action_type();
  }
}
inline ::protobuf::ModifyElementRequest* PacketAction::release_modifyelement() {
  // @@protoc_insertion_point(field_release:protobuf.PacketAction.modifyElement)
  if (action_type_case() == kModifyElement) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.modifyelement_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.action_type_.modifyelement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf::ModifyElementRequest& PacketAction::_internal_modifyelement() const {
  return action_type_case() == kModifyElement ? *_impl_.action_type_.modifyelement_ : reinterpret_cast<::protobuf::ModifyElementRequest&>(::protobuf::_ModifyElementRequest_default_instance_);
}
inline const ::protobuf::ModifyElementRequest& PacketAction::modifyelement() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.PacketAction.modifyElement)
  return _internal_modifyelement();
}
inline ::protobuf::ModifyElementRequest* PacketAction::unsafe_arena_release_modifyelement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.PacketAction.modifyElement)
  if (action_type_case() == kModifyElement) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.modifyelement_;
    _impl_.action_type_.modifyelement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketAction::unsafe_arena_set_allocated_modifyelement(::protobuf::ModifyElementRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_action_type();
  if (value) {
    set_has_modifyelement();
    _impl_.action_type_.modifyelement_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PacketAction.modifyElement)
}
inline ::protobuf::ModifyElementRequest* PacketAction::_internal_mutable_modifyelement() {
  if (action_type_case() != kModifyElement) {
    clear_action_type();
    set_has_modifyelement();
    _impl_.action_type_.modifyelement_ = CreateMaybeMessage<::protobuf::ModifyElementRequest>(GetArena());
  }
  return _impl_.action_type_.modifyelement_;
}
inline ::protobuf::ModifyElementRequest* PacketAction::mutable_modifyelement() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protobuf::ModifyElementRequest* _msg = _internal_mutable_modifyelement();
  // @@protoc_insertion_point(field_mutable:protobuf.PacketAction.modifyElement)
  return _msg;
}

// .protobuf.DeleteElementRequest deleteElement = 7;
inline bool PacketAction::has_deleteelement() const {
  return action_type_case() == kDeleteElement;
}
inline bool PacketAction::_internal_has_deleteelement() const {
  return action_type_case() == kDeleteElement;
}
inline void PacketAction::set_has_deleteelement() {
  _impl_._oneof_case_[0] = kDeleteElement;
}
inline void PacketAction::clear_deleteelement() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (action_type_case() == kDeleteElement) {
    if (GetArena() == nullptr) {
      delete _impl_.action_type_.deleteelement_;
    }
    clear_has_action_type();
  }
}
inline ::protobuf::DeleteElementRequest* PacketAction::release_deleteelement() {
  // @@protoc_insertion_point(field_release:protobuf.PacketAction.deleteElement)
  if (action_type_case() == kDeleteElement) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.deleteelement_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.action_type_.deleteelement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf::DeleteElementRequest& PacketAction::_internal_deleteelement() const {
  return action_type_case() == kDeleteElement ? *_impl_.action_type_.deleteelement_ : reinterpret_cast<::protobuf::DeleteElementRequest&>(::protobuf::_DeleteElementRequest_default_instance_);
}
inline const ::protobuf::DeleteElementRequest& PacketAction::deleteelement() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.PacketAction.deleteElement)
  return _internal_deleteelement();
}
inline ::protobuf::DeleteElementRequest* PacketAction::unsafe_arena_release_deleteelement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.PacketAction.deleteElement)
  if (action_type_case() == kDeleteElement) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.deleteelement_;
    _impl_.action_type_.deleteelement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketAction::unsafe_arena_set_allocated_deleteelement(::protobuf::DeleteElementRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_action_type();
  if (value) {
    set_has_deleteelement();
    _impl_.action_type_.deleteelement_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PacketAction.deleteElement)
}
inline ::protobuf::DeleteElementRequest* PacketAction::_internal_mutable_deleteelement() {
  if (action_type_case() != kDeleteElement) {
    clear_action_type();
    set_has_deleteelement();
    _impl_.action_type_.deleteelement_ = CreateMaybeMessage<::protobuf::DeleteElementRequest>(GetArena());
  }
  return _impl_.action_type_.deleteelement_;
}
inline ::protobuf::DeleteElementRequest* PacketAction::mutable_deleteelement() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protobuf::DeleteElementRequest* _msg = _internal_mutable_deleteelement();
  // @@protoc_insertion_point(field_mutable:protobuf.PacketAction.deleteElement)
  return _msg;
}

// .protobuf.SaveWhiteboardRequest saveWhiteboard = 8;
inline bool PacketAction::has_savewhiteboard() const {
  return action_type_case() == kSaveWhiteboard;
}
inline bool PacketAction::_internal_has_savewhiteboard() const {
  return action_type_case() == kSaveWhiteboard;
}
inline void PacketAction::set_has_savewhiteboard() {
  _impl_._oneof_case_[0] = kSaveWhiteboard;
}
inline void PacketAction::clear_savewhiteboard() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (action_type_case() == kSaveWhiteboard) {
    if (GetArena() == nullptr) {
      delete _impl_.action_type_.savewhiteboard_;
    }
    clear_has_action_type();
  }
}
inline ::protobuf::SaveWhiteboardRequest* PacketAction::release_savewhiteboard() {
  // @@protoc_insertion_point(field_release:protobuf.PacketAction.saveWhiteboard)
  if (action_type_case() == kSaveWhiteboard) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.savewhiteboard_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.action_type_.savewhiteboard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf::SaveWhiteboardRequest& PacketAction::_internal_savewhiteboard() const {
  return action_type_case() == kSaveWhiteboard ? *_impl_.action_type_.savewhiteboard_ : reinterpret_cast<::protobuf::SaveWhiteboardRequest&>(::protobuf::_SaveWhiteboardRequest_default_instance_);
}
inline const ::protobuf::SaveWhiteboardRequest& PacketAction::savewhiteboard() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.PacketAction.saveWhiteboard)
  return _internal_savewhiteboard();
}
inline ::protobuf::SaveWhiteboardRequest* PacketAction::unsafe_arena_release_savewhiteboard() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.PacketAction.saveWhiteboard)
  if (action_type_case() == kSaveWhiteboard) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.savewhiteboard_;
    _impl_.action_type_.savewhiteboard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketAction::unsafe_arena_set_allocated_savewhiteboard(::protobuf::SaveWhiteboardRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_action_type();
  if (value) {
    set_has_savewhiteboard();
    _impl_.action_type_.savewhiteboard_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PacketAction.saveWhiteboard)
}
inline ::protobuf::SaveWhiteboardRequest* PacketAction::_internal_mutable_savewhiteboard() {
  if (action_type_case() != kSaveWhiteboard) {
    clear_action_type();
    set_has_savewhiteboard();
    _impl_.action_type_.savewhiteboard_ = CreateMaybeMessage<::protobuf::SaveWhiteboardRequest>(GetArena());
  }
  return _impl_.action_type_.savewhiteboard_;
}
inline ::protobuf::SaveWhiteboardRequest* PacketAction::mutable_savewhiteboard() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protobuf::SaveWhiteboardRequest* _msg = _internal_mutable_savewhiteboard();
  // @@protoc_insertion_point(field_mutable:protobuf.PacketAction.saveWhiteboard)
  return _msg;
}

// .protobuf.RegisterRequest registerRequest = 9;
inline bool PacketAction::has_registerrequest() const {
  return action_type_case() == kRegisterRequest;
}
inline bool PacketAction::_internal_has_registerrequest() const {
  return action_type_case() == kRegisterRequest;
}
inline void PacketAction::set_has_registerrequest() {
  _impl_._oneof_case_[0] = kRegisterRequest;
}
inline void PacketAction::clear_registerrequest() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (action_type_case() == kRegisterRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.action_type_.registerrequest_;
    }
    clear_has_action_type();
  }
}
inline ::protobuf::RegisterRequest* PacketAction::release_registerrequest() {
  // @@protoc_insertion_point(field_release:protobuf.PacketAction.registerRequest)
  if (action_type_case() == kRegisterRequest) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.registerrequest_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.action_type_.registerrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf::RegisterRequest& PacketAction::_internal_registerrequest() const {
  return action_type_case() == kRegisterRequest ? *_impl_.action_type_.registerrequest_ : reinterpret_cast<::protobuf::RegisterRequest&>(::protobuf::_RegisterRequest_default_instance_);
}
inline const ::protobuf::RegisterRequest& PacketAction::registerrequest() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.PacketAction.registerRequest)
  return _internal_registerrequest();
}
inline ::protobuf::RegisterRequest* PacketAction::unsafe_arena_release_registerrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.PacketAction.registerRequest)
  if (action_type_case() == kRegisterRequest) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.registerrequest_;
    _impl_.action_type_.registerrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketAction::unsafe_arena_set_allocated_registerrequest(::protobuf::RegisterRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_action_type();
  if (value) {
    set_has_registerrequest();
    _impl_.action_type_.registerrequest_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PacketAction.registerRequest)
}
inline ::protobuf::RegisterRequest* PacketAction::_internal_mutable_registerrequest() {
  if (action_type_case() != kRegisterRequest) {
    clear_action_type();
    set_has_registerrequest();
    _impl_.action_type_.registerrequest_ = CreateMaybeMessage<::protobuf::RegisterRequest>(GetArena());
  }
  return _impl_.action_type_.registerrequest_;
}
inline ::protobuf::RegisterRequest* PacketAction::mutable_registerrequest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protobuf::RegisterRequest* _msg = _internal_mutable_registerrequest();
  // @@protoc_insertion_point(field_mutable:protobuf.PacketAction.registerRequest)
  return _msg;
}

// .protobuf.LoginRequest loginRequest = 10;
inline bool PacketAction::has_loginrequest() const {
  return action_type_case() == kLoginRequest;
}
inline bool PacketAction::_internal_has_loginrequest() const {
  return action_type_case() == kLoginRequest;
}
inline void PacketAction::set_has_loginrequest() {
  _impl_._oneof_case_[0] = kLoginRequest;
}
inline void PacketAction::clear_loginrequest() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (action_type_case() == kLoginRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.action_type_.loginrequest_;
    }
    clear_has_action_type();
  }
}
inline ::protobuf::LoginRequest* PacketAction::release_loginrequest() {
  // @@protoc_insertion_point(field_release:protobuf.PacketAction.loginRequest)
  if (action_type_case() == kLoginRequest) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.loginrequest_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.action_type_.loginrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf::LoginRequest& PacketAction::_internal_loginrequest() const {
  return action_type_case() == kLoginRequest ? *_impl_.action_type_.loginrequest_ : reinterpret_cast<::protobuf::LoginRequest&>(::protobuf::_LoginRequest_default_instance_);
}
inline const ::protobuf::LoginRequest& PacketAction::loginrequest() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.PacketAction.loginRequest)
  return _internal_loginrequest();
}
inline ::protobuf::LoginRequest* PacketAction::unsafe_arena_release_loginrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.PacketAction.loginRequest)
  if (action_type_case() == kLoginRequest) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.loginrequest_;
    _impl_.action_type_.loginrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketAction::unsafe_arena_set_allocated_loginrequest(::protobuf::LoginRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_action_type();
  if (value) {
    set_has_loginrequest();
    _impl_.action_type_.loginrequest_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PacketAction.loginRequest)
}
inline ::protobuf::LoginRequest* PacketAction::_internal_mutable_loginrequest() {
  if (action_type_case() != kLoginRequest) {
    clear_action_type();
    set_has_loginrequest();
    _impl_.action_type_.loginrequest_ = CreateMaybeMessage<::protobuf::LoginRequest>(GetArena());
  }
  return _impl_.action_type_.loginrequest_;
}
inline ::protobuf::LoginRequest* PacketAction::mutable_loginrequest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protobuf::LoginRequest* _msg = _internal_mutable_loginrequest();
  // @@protoc_insertion_point(field_mutable:protobuf.PacketAction.loginRequest)
  return _msg;
}

// .protobuf.ActionResponse actionResponse = 11;
inline bool PacketAction::has_actionresponse() const {
  return action_type_case() == kActionResponse;
}
inline bool PacketAction::_internal_has_actionresponse() const {
  return action_type_case() == kActionResponse;
}
inline void PacketAction::set_has_actionresponse() {
  _impl_._oneof_case_[0] = kActionResponse;
}
inline void PacketAction::clear_actionresponse() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (action_type_case() == kActionResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.action_type_.actionresponse_;
    }
    clear_has_action_type();
  }
}
inline ::protobuf::ActionResponse* PacketAction::release_actionresponse() {
  // @@protoc_insertion_point(field_release:protobuf.PacketAction.actionResponse)
  if (action_type_case() == kActionResponse) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.actionresponse_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.action_type_.actionresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf::ActionResponse& PacketAction::_internal_actionresponse() const {
  return action_type_case() == kActionResponse ? *_impl_.action_type_.actionresponse_ : reinterpret_cast<::protobuf::ActionResponse&>(::protobuf::_ActionResponse_default_instance_);
}
inline const ::protobuf::ActionResponse& PacketAction::actionresponse() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.PacketAction.actionResponse)
  return _internal_actionresponse();
}
inline ::protobuf::ActionResponse* PacketAction::unsafe_arena_release_actionresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.PacketAction.actionResponse)
  if (action_type_case() == kActionResponse) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.actionresponse_;
    _impl_.action_type_.actionresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketAction::unsafe_arena_set_allocated_actionresponse(::protobuf::ActionResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_action_type();
  if (value) {
    set_has_actionresponse();
    _impl_.action_type_.actionresponse_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PacketAction.actionResponse)
}
inline ::protobuf::ActionResponse* PacketAction::_internal_mutable_actionresponse() {
  if (action_type_case() != kActionResponse) {
    clear_action_type();
    set_has_actionresponse();
    _impl_.action_type_.actionresponse_ = CreateMaybeMessage<::protobuf::ActionResponse>(GetArena());
  }
  return _impl_.action_type_.actionresponse_;
}
inline ::protobuf::ActionResponse* PacketAction::mutable_actionresponse() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protobuf::ActionResponse* _msg = _internal_mutable_actionresponse();
  // @@protoc_insertion_point(field_mutable:protobuf.PacketAction.actionResponse)
  return _msg;
}

// .protobuf.BroadCast broadcast = 12;
inline bool PacketAction::has_broadcast() const {
  return action_type_case() == kBroadcast;
}
inline bool PacketAction::_internal_has_broadcast() const {
  return action_type_case() == kBroadcast;
}
inline void PacketAction::set_has_broadcast() {
  _impl_._oneof_case_[0] = kBroadcast;
}
inline void PacketAction::clear_broadcast() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (action_type_case() == kBroadcast) {
    if (GetArena() == nullptr) {
      delete _impl_.action_type_.broadcast_;
    }
    clear_has_action_type();
  }
}
inline ::protobuf::BroadCast* PacketAction::release_broadcast() {
  // @@protoc_insertion_point(field_release:protobuf.PacketAction.broadcast)
  if (action_type_case() == kBroadcast) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.broadcast_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.action_type_.broadcast_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf::BroadCast& PacketAction::_internal_broadcast() const {
  return action_type_case() == kBroadcast ? *_impl_.action_type_.broadcast_ : reinterpret_cast<::protobuf::BroadCast&>(::protobuf::_BroadCast_default_instance_);
}
inline const ::protobuf::BroadCast& PacketAction::broadcast() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.PacketAction.broadcast)
  return _internal_broadcast();
}
inline ::protobuf::BroadCast* PacketAction::unsafe_arena_release_broadcast() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.PacketAction.broadcast)
  if (action_type_case() == kBroadcast) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.broadcast_;
    _impl_.action_type_.broadcast_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketAction::unsafe_arena_set_allocated_broadcast(::protobuf::BroadCast* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_action_type();
  if (value) {
    set_has_broadcast();
    _impl_.action_type_.broadcast_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PacketAction.broadcast)
}
inline ::protobuf::BroadCast* PacketAction::_internal_mutable_broadcast() {
  if (action_type_case() != kBroadcast) {
    clear_action_type();
    set_has_broadcast();
    _impl_.action_type_.broadcast_ = CreateMaybeMessage<::protobuf::BroadCast>(GetArena());
  }
  return _impl_.action_type_.broadcast_;
}
inline ::protobuf::BroadCast* PacketAction::mutable_broadcast() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protobuf::BroadCast* _msg = _internal_mutable_broadcast();
  // @@protoc_insertion_point(field_mutable:protobuf.PacketAction.broadcast)
  return _msg;
}

// .protobuf.TempIDResponse tempIdResponse = 13;
inline bool PacketAction::has_tempidresponse() const {
  return action_type_case() == kTempIdResponse;
}
inline bool PacketAction::_internal_has_tempidresponse() const {
  return action_type_case() == kTempIdResponse;
}
inline void PacketAction::set_has_tempidresponse() {
  _impl_._oneof_case_[0] = kTempIdResponse;
}
inline void PacketAction::clear_tempidresponse() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (action_type_case() == kTempIdResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.action_type_.tempidresponse_;
    }
    clear_has_action_type();
  }
}
inline ::protobuf::TempIDResponse* PacketAction::release_tempidresponse() {
  // @@protoc_insertion_point(field_release:protobuf.PacketAction.tempIdResponse)
  if (action_type_case() == kTempIdResponse) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.tempidresponse_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.action_type_.tempidresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf::TempIDResponse& PacketAction::_internal_tempidresponse() const {
  return action_type_case() == kTempIdResponse ? *_impl_.action_type_.tempidresponse_ : reinterpret_cast<::protobuf::TempIDResponse&>(::protobuf::_TempIDResponse_default_instance_);
}
inline const ::protobuf::TempIDResponse& PacketAction::tempidresponse() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protobuf.PacketAction.tempIdResponse)
  return _internal_tempidresponse();
}
inline ::protobuf::TempIDResponse* PacketAction::unsafe_arena_release_tempidresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf.PacketAction.tempIdResponse)
  if (action_type_case() == kTempIdResponse) {
    clear_has_action_type();
    auto* temp = _impl_.action_type_.tempidresponse_;
    _impl_.action_type_.tempidresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketAction::unsafe_arena_set_allocated_tempidresponse(::protobuf::TempIDResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_action_type();
  if (value) {
    set_has_tempidresponse();
    _impl_.action_type_.tempidresponse_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf.PacketAction.tempIdResponse)
}
inline ::protobuf::TempIDResponse* PacketAction::_internal_mutable_tempidresponse() {
  if (action_type_case() != kTempIdResponse) {
    clear_action_type();
    set_has_tempidresponse();
    _impl_.action_type_.tempidresponse_ = CreateMaybeMessage<::protobuf::TempIDResponse>(GetArena());
  }
  return _impl_.action_type_.tempidresponse_;
}
inline ::protobuf::TempIDResponse* PacketAction::mutable_tempidresponse() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::protobuf::TempIDResponse* _msg = _internal_mutable_tempidresponse();
  // @@protoc_insertion_point(field_mutable:protobuf.PacketAction.tempIdResponse)
  return _msg;
}

inline bool PacketAction::has_action_type() const {
  return action_type_case() != ACTION_TYPE_NOT_SET;
}
inline void PacketAction::clear_has_action_type() {
  _impl_._oneof_case_[0] = ACTION_TYPE_NOT_SET;
}
inline PacketAction::ActionTypeCase PacketAction::action_type_case() const {
  return PacketAction::ActionTypeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_action_2eproto_2epb_2eh

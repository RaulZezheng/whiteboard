// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: element.proto

#include "element.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace protobuf {

inline constexpr Point::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Point::Point(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;

inline constexpr Common::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stroke_color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Common::Common(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CommonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonDefaultTypeInternal() {}
  union {
    Common _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonDefaultTypeInternal _Common_default_instance_;

inline constexpr Comment::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : user_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        content_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Comment::Comment(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CommentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommentDefaultTypeInternal() {}
  union {
    Comment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommentDefaultTypeInternal _Comment_default_instance_;

inline constexpr Triangle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        common_{nullptr},
        point1_{nullptr},
        point2_{nullptr},
        point3_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Triangle::Triangle(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TriangleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TriangleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TriangleDefaultTypeInternal() {}
  union {
    Triangle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TriangleDefaultTypeInternal _Triangle_default_instance_;

inline constexpr Text::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        content_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        common_{nullptr},
        center_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Text::Text(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextDefaultTypeInternal() {}
  union {
    Text _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextDefaultTypeInternal _Text_default_instance_;

inline constexpr StickyNote::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        content_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        common_{nullptr},
        center_{nullptr},
        side_length_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StickyNote::StickyNote(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StickyNoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StickyNoteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StickyNoteDefaultTypeInternal() {}
  union {
    StickyNote _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StickyNoteDefaultTypeInternal _StickyNote_default_instance_;

inline constexpr Square::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        common_{nullptr},
        topleft_{nullptr},
        side_length_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Square::Square(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SquareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SquareDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SquareDefaultTypeInternal() {}
  union {
    Square _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SquareDefaultTypeInternal _Square_default_instance_;

inline constexpr Picture::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        comments_{},
        file_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        common_{nullptr},
        center_{nullptr},
        top_side_length_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Picture::Picture(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PictureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PictureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PictureDefaultTypeInternal() {}
  union {
    Picture _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PictureDefaultTypeInternal _Picture_default_instance_;

inline constexpr Path::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        points_{},
        common_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Path::Path(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathDefaultTypeInternal() {}
  union {
    Path _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathDefaultTypeInternal _Path_default_instance_;

inline constexpr Line::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        common_{nullptr},
        start_{nullptr},
        end_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Line::Line(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineDefaultTypeInternal() {}
  union {
    Line _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineDefaultTypeInternal _Line_default_instance_;

inline constexpr Circle::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        common_{nullptr},
        center_{nullptr},
        radius_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Circle::Circle(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CircleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CircleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CircleDefaultTypeInternal() {}
  union {
    Circle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CircleDefaultTypeInternal _Circle_default_instance_;

inline constexpr Element::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : element_type_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Element::Element(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ElementDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ElementDefaultTypeInternal() {}
  union {
    Element _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ElementDefaultTypeInternal _Element_default_instance_;
}  // namespace protobuf
static ::_pb::Metadata file_level_metadata_element_2eproto[12];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_element_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_element_2eproto = nullptr;
const ::uint32_t TableStruct_element_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::Point, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf::Point, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Point, _impl_.y_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::Common, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf::Common, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Common, _impl_.stroke_color_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Common, _impl_.user_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Path, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Path, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf::Path, _impl_.common_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Path, _impl_.points_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::protobuf::Line, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Line, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf::Line, _impl_.common_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Line, _impl_.start_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Line, _impl_.end_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::protobuf::Circle, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Circle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf::Circle, _impl_.common_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Circle, _impl_.center_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Circle, _impl_.radius_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::protobuf::Triangle, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Triangle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf::Triangle, _impl_.common_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Triangle, _impl_.point1_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Triangle, _impl_.point2_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Triangle, _impl_.point3_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::protobuf::Square, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Square, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf::Square, _impl_.common_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Square, _impl_.topleft_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Square, _impl_.side_length_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::protobuf::Text, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Text, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf::Text, _impl_.common_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Text, _impl_.center_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Text, _impl_.content_),
    0,
    1,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::Comment, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf::Comment, _impl_.user_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Comment, _impl_.content_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Picture, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Picture, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf::Picture, _impl_.common_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Picture, _impl_.file_name_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Picture, _impl_.center_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Picture, _impl_.top_side_length_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Picture, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::protobuf::Picture, _impl_.comments_),
    0,
    ~0u,
    1,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::protobuf::StickyNote, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::protobuf::StickyNote, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::protobuf::StickyNote, _impl_.common_),
    PROTOBUF_FIELD_OFFSET(::protobuf::StickyNote, _impl_.center_),
    PROTOBUF_FIELD_OFFSET(::protobuf::StickyNote, _impl_.side_length_),
    PROTOBUF_FIELD_OFFSET(::protobuf::StickyNote, _impl_.content_),
    0,
    1,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::Element, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::protobuf::Element, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::protobuf::Element, _impl_.element_type_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::protobuf::Point)},
        {10, -1, -1, sizeof(::protobuf::Common)},
        {21, 31, -1, sizeof(::protobuf::Path)},
        {33, 44, -1, sizeof(::protobuf::Line)},
        {47, 58, -1, sizeof(::protobuf::Circle)},
        {61, 73, -1, sizeof(::protobuf::Triangle)},
        {77, 88, -1, sizeof(::protobuf::Square)},
        {91, 102, -1, sizeof(::protobuf::Text)},
        {105, -1, -1, sizeof(::protobuf::Comment)},
        {115, 129, -1, sizeof(::protobuf::Picture)},
        {135, 147, -1, sizeof(::protobuf::StickyNote)},
        {151, -1, -1, sizeof(::protobuf::Element)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::protobuf::_Point_default_instance_._instance,
    &::protobuf::_Common_default_instance_._instance,
    &::protobuf::_Path_default_instance_._instance,
    &::protobuf::_Line_default_instance_._instance,
    &::protobuf::_Circle_default_instance_._instance,
    &::protobuf::_Triangle_default_instance_._instance,
    &::protobuf::_Square_default_instance_._instance,
    &::protobuf::_Text_default_instance_._instance,
    &::protobuf::_Comment_default_instance_._instance,
    &::protobuf::_Picture_default_instance_._instance,
    &::protobuf::_StickyNote_default_instance_._instance,
    &::protobuf::_Element_default_instance_._instance,
};
const char descriptor_table_protodef_element_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\relement.proto\022\010protobuf\"\035\n\005Point\022\t\n\001x\030"
    "\001 \001(\002\022\t\n\001y\030\002 \001(\002\";\n\006Common\022\n\n\002id\030\001 \001(\t\022\024"
    "\n\014stroke_color\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\t\"I\n"
    "\004Path\022 \n\006common\030\001 \001(\0132\020.protobuf.Common\022"
    "\037\n\006points\030\002 \003(\0132\017.protobuf.Point\"f\n\004Line"
    "\022 \n\006common\030\001 \001(\0132\020.protobuf.Common\022\036\n\005st"
    "art\030\002 \001(\0132\017.protobuf.Point\022\034\n\003end\030\003 \001(\0132"
    "\017.protobuf.Point\"[\n\006Circle\022 \n\006common\030\001 \001"
    "(\0132\020.protobuf.Common\022\037\n\006center\030\002 \001(\0132\017.p"
    "rotobuf.Point\022\016\n\006radius\030\003 \001(\002\"\217\001\n\010Triang"
    "le\022 \n\006common\030\001 \001(\0132\020.protobuf.Common\022\037\n\006"
    "point1\030\002 \001(\0132\017.protobuf.Point\022\037\n\006point2\030"
    "\003 \001(\0132\017.protobuf.Point\022\037\n\006point3\030\004 \001(\0132\017"
    ".protobuf.Point\"a\n\006Square\022 \n\006common\030\001 \001("
    "\0132\020.protobuf.Common\022 \n\007topleft\030\002 \001(\0132\017.p"
    "rotobuf.Point\022\023\n\013side_length\030\003 \001(\002\"Z\n\004Te"
    "xt\022 \n\006common\030\001 \001(\0132\020.protobuf.Common\022\037\n\006"
    "center\030\002 \001(\0132\017.protobuf.Point\022\017\n\007content"
    "\030\003 \001(\t\"+\n\007Comment\022\017\n\007user_id\030\001 \001(\t\022\017\n\007co"
    "ntent\030\002 \001(\t\"\253\001\n\007Picture\022 \n\006common\030\001 \001(\0132"
    "\020.protobuf.Common\022\021\n\tfile_name\030\002 \001(\t\022\037\n\006"
    "center\030\003 \001(\0132\017.protobuf.Point\022\027\n\017top_sid"
    "e_length\030\004 \001(\002\022\014\n\004data\030\005 \001(\014\022#\n\010comments"
    "\030\006 \003(\0132\021.protobuf.Comment\"u\n\nStickyNote\022"
    " \n\006common\030\001 \001(\0132\020.protobuf.Common\022\037\n\006cen"
    "ter\030\002 \001(\0132\017.protobuf.Point\022\023\n\013side_lengt"
    "h\030\003 \001(\002\022\017\n\007content\030\004 \001(\t\"\273\002\n\007Element\022\036\n\004"
    "path\030\001 \001(\0132\016.protobuf.PathH\000\022\036\n\004line\030\002 \001"
    "(\0132\016.protobuf.LineH\000\022\"\n\006circle\030\003 \001(\0132\020.p"
    "rotobuf.CircleH\000\022&\n\010triangle\030\004 \001(\0132\022.pro"
    "tobuf.TriangleH\000\022\"\n\006square\030\005 \001(\0132\020.proto"
    "buf.SquareH\000\022\036\n\004text\030\006 \001(\0132\016.protobuf.Te"
    "xtH\000\022$\n\007picture\030\007 \001(\0132\021.protobuf.Picture"
    "H\000\022*\n\nstickynote\030\010 \001(\0132\024.protobuf.Sticky"
    "NoteH\000B\016\n\014element_typeb\006proto3"
};
static ::absl::once_flag descriptor_table_element_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_element_2eproto = {
    false,
    false,
    1390,
    descriptor_table_protodef_element_2eproto,
    "element.proto",
    &descriptor_table_element_2eproto_once,
    nullptr,
    0,
    12,
    schemas,
    file_default_instances,
    TableStruct_element_2eproto::offsets,
    file_level_metadata_element_2eproto,
    file_level_enum_descriptors_element_2eproto,
    file_level_service_descriptors_element_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_element_2eproto_getter() {
  return &descriptor_table_element_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_element_2eproto(&descriptor_table_element_2eproto);
namespace protobuf {
// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.Point)
}
Point::Point(
    ::google::protobuf::Arena* arena, const Point& from)
    : Point(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Point::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Point::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, y_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::y_));
}
Point::~Point() {
  // @@protoc_insertion_point(destructor:protobuf.Point)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Point::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Point)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Point::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Point::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Point_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Point, _impl_.y_)}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(Point, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(Point, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Point::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Point)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Point)
  return target;
}

::size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Point)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 5;
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Point::_class_data_ = {
    Point::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Point::GetClassData() const {
  return &_class_data_;
}

void Point::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Point)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Point::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Point::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Point::InternalSwap(Point* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.y_)
      + sizeof(Point::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_element_2eproto_getter, &descriptor_table_element_2eproto_once,
      file_level_metadata_element_2eproto[0]);
}
// ===================================================================

class Common::_Internal {
 public:
};

Common::Common(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.Common)
}
inline PROTOBUF_NDEBUG_INLINE Common::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : id_(arena, from.id_),
        stroke_color_(arena, from.stroke_color_),
        user_id_(arena, from.user_id_),
        _cached_size_{0} {}

Common::Common(
    ::google::protobuf::Arena* arena,
    const Common& from)
    : ::google::protobuf::Message(arena) {
  Common* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:protobuf.Common)
}
inline PROTOBUF_NDEBUG_INLINE Common::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        stroke_color_(arena),
        user_id_(arena),
        _cached_size_{0} {}

inline void Common::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Common::~Common() {
  // @@protoc_insertion_point(destructor:protobuf.Common)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Common::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.id_.Destroy();
  _impl_.stroke_color_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Common::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Common)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.stroke_color_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Common::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 45, 2> Common::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Common_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Common, _impl_.id_)}},
    // string stroke_color = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Common, _impl_.stroke_color_)}},
    // string user_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Common, _impl_.user_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1;
    {PROTOBUF_FIELD_OFFSET(Common, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string stroke_color = 2;
    {PROTOBUF_FIELD_OFFSET(Common, _impl_.stroke_color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string user_id = 3;
    {PROTOBUF_FIELD_OFFSET(Common, _impl_.user_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\17\2\14\7\0\0\0\0"
    "protobuf.Common"
    "id"
    "stroke_color"
    "user_id"
  }},
};

::uint8_t* Common::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Common)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Common.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string stroke_color = 2;
  if (!this->_internal_stroke_color().empty()) {
    const std::string& _s = this->_internal_stroke_color();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Common.stroke_color");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string user_id = 3;
  if (!this->_internal_user_id().empty()) {
    const std::string& _s = this->_internal_user_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Common.user_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Common)
  return target;
}

::size_t Common::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Common)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string stroke_color = 2;
  if (!this->_internal_stroke_color().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_stroke_color());
  }

  // string user_id = 3;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Common::_class_data_ = {
    Common::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Common::GetClassData() const {
  return &_class_data_;
}

void Common::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Common*>(&to_msg);
  auto& from = static_cast<const Common&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Common)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_stroke_color().empty()) {
    _this->_internal_set_stroke_color(from._internal_stroke_color());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Common::CopyFrom(const Common& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Common)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Common::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Common::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Common::InternalSwap(Common* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stroke_color_, &other->_impl_.stroke_color_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, &other->_impl_.user_id_, arena);
}

::google::protobuf::Metadata Common::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_element_2eproto_getter, &descriptor_table_element_2eproto_once,
      file_level_metadata_element_2eproto[1]);
}
// ===================================================================

class Path::_Internal {
 public:
  using HasBits = decltype(std::declval<Path>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Path, _impl_._has_bits_);
  static const ::protobuf::Common& common(const Path* msg);
  static void set_has_common(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf::Common& Path::_Internal::common(const Path* msg) {
  return *msg->_impl_.common_;
}
Path::Path(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.Path)
}
inline PROTOBUF_NDEBUG_INLINE Path::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        points_{visibility, arena, from.points_} {}

Path::Path(
    ::google::protobuf::Arena* arena,
    const Path& from)
    : ::google::protobuf::Message(arena) {
  Path* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.common_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::protobuf::Common>(arena, *from._impl_.common_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:protobuf.Path)
}
inline PROTOBUF_NDEBUG_INLINE Path::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        points_{visibility, arena} {}

inline void Path::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.common_ = {};
}
Path::~Path() {
  // @@protoc_insertion_point(destructor:protobuf.Path)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Path::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.common_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Path)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.common_ != nullptr);
    _impl_.common_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Path::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> Path::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Path, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Path_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .protobuf.Point points = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(Path, _impl_.points_)}},
    // .protobuf.Common common = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Path, _impl_.common_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protobuf.Common common = 1;
    {PROTOBUF_FIELD_OFFSET(Path, _impl_.common_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .protobuf.Point points = 2;
    {PROTOBUF_FIELD_OFFSET(Path, _impl_.points_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf::Common>()},
    {::_pbi::TcParser::GetTable<::protobuf::Point>()},
  }}, {{
  }},
};

::uint8_t* Path::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Path)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .protobuf.Common common = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // repeated .protobuf.Point points = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Path)
  return target;
}

::size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Path)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf.Point points = 2;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_internal_points()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .protobuf.Common common = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.common_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Path::_class_data_ = {
    Path::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Path::GetClassData() const {
  return &_class_data_;
}

void Path::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Path*>(&to_msg);
  auto& from = static_cast<const Path&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Path)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_points()->MergeFrom(
      from._internal_points());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_common()->::protobuf::Common::MergeFrom(
        from._internal_common());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Path::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Path::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Path::InternalSwap(Path* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  swap(_impl_.common_, other->_impl_.common_);
}

::google::protobuf::Metadata Path::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_element_2eproto_getter, &descriptor_table_element_2eproto_once,
      file_level_metadata_element_2eproto[2]);
}
// ===================================================================

class Line::_Internal {
 public:
  using HasBits = decltype(std::declval<Line>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Line, _impl_._has_bits_);
  static const ::protobuf::Common& common(const Line* msg);
  static void set_has_common(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf::Point& start(const Line* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf::Point& end(const Line* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::protobuf::Common& Line::_Internal::common(const Line* msg) {
  return *msg->_impl_.common_;
}
const ::protobuf::Point& Line::_Internal::start(const Line* msg) {
  return *msg->_impl_.start_;
}
const ::protobuf::Point& Line::_Internal::end(const Line* msg) {
  return *msg->_impl_.end_;
}
Line::Line(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.Line)
}
inline PROTOBUF_NDEBUG_INLINE Line::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Line::Line(
    ::google::protobuf::Arena* arena,
    const Line& from)
    : ::google::protobuf::Message(arena) {
  Line* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.common_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::protobuf::Common>(arena, *from._impl_.common_)
                : nullptr;
  _impl_.start_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::protobuf::Point>(arena, *from._impl_.start_)
                : nullptr;
  _impl_.end_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::protobuf::Point>(arena, *from._impl_.end_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:protobuf.Line)
}
inline PROTOBUF_NDEBUG_INLINE Line::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Line::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, common_),
           0,
           offsetof(Impl_, end_) -
               offsetof(Impl_, common_) +
               sizeof(Impl_::end_));
}
Line::~Line() {
  // @@protoc_insertion_point(destructor:protobuf.Line)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Line::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.common_;
  delete _impl_.start_;
  delete _impl_.end_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Line)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.common_ != nullptr);
      _impl_.common_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.start_ != nullptr);
      _impl_.start_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.end_ != nullptr);
      _impl_.end_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Line::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> Line::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Line, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Line_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protobuf.Common common = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Line, _impl_.common_)}},
    // .protobuf.Point start = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Line, _impl_.start_)}},
    // .protobuf.Point end = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Line, _impl_.end_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protobuf.Common common = 1;
    {PROTOBUF_FIELD_OFFSET(Line, _impl_.common_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf.Point start = 2;
    {PROTOBUF_FIELD_OFFSET(Line, _impl_.start_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf.Point end = 3;
    {PROTOBUF_FIELD_OFFSET(Line, _impl_.end_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf::Common>()},
    {::_pbi::TcParser::GetTable<::protobuf::Point>()},
    {::_pbi::TcParser::GetTable<::protobuf::Point>()},
  }}, {{
  }},
};

::uint8_t* Line::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Line)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .protobuf.Common common = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .protobuf.Point start = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::start(this),
        _Internal::start(this).GetCachedSize(), target, stream);
  }

  // .protobuf.Point end = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::end(this),
        _Internal::end(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Line)
  return target;
}

::size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Line)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .protobuf.Common common = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.common_);
    }

    // .protobuf.Point start = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.start_);
    }

    // .protobuf.Point end = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.end_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Line::_class_data_ = {
    Line::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Line::GetClassData() const {
  return &_class_data_;
}

void Line::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Line*>(&to_msg);
  auto& from = static_cast<const Line&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Line)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_common()->::protobuf::Common::MergeFrom(
          from._internal_common());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_start()->::protobuf::Point::MergeFrom(
          from._internal_start());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_end()->::protobuf::Point::MergeFrom(
          from._internal_end());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Line::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Line::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Line::InternalSwap(Line* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Line, _impl_.end_)
      + sizeof(Line::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(Line, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::google::protobuf::Metadata Line::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_element_2eproto_getter, &descriptor_table_element_2eproto_once,
      file_level_metadata_element_2eproto[3]);
}
// ===================================================================

class Circle::_Internal {
 public:
  using HasBits = decltype(std::declval<Circle>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Circle, _impl_._has_bits_);
  static const ::protobuf::Common& common(const Circle* msg);
  static void set_has_common(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf::Point& center(const Circle* msg);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf::Common& Circle::_Internal::common(const Circle* msg) {
  return *msg->_impl_.common_;
}
const ::protobuf::Point& Circle::_Internal::center(const Circle* msg) {
  return *msg->_impl_.center_;
}
Circle::Circle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.Circle)
}
inline PROTOBUF_NDEBUG_INLINE Circle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Circle::Circle(
    ::google::protobuf::Arena* arena,
    const Circle& from)
    : ::google::protobuf::Message(arena) {
  Circle* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.common_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::protobuf::Common>(arena, *from._impl_.common_)
                : nullptr;
  _impl_.center_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::protobuf::Point>(arena, *from._impl_.center_)
                : nullptr;
  _impl_.radius_ = from._impl_.radius_;

  // @@protoc_insertion_point(copy_constructor:protobuf.Circle)
}
inline PROTOBUF_NDEBUG_INLINE Circle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Circle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, common_),
           0,
           offsetof(Impl_, radius_) -
               offsetof(Impl_, common_) +
               sizeof(Impl_::radius_));
}
Circle::~Circle() {
  // @@protoc_insertion_point(destructor:protobuf.Circle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Circle::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.common_;
  delete _impl_.center_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Circle::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Circle)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.common_ != nullptr);
      _impl_.common_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.center_ != nullptr);
      _impl_.center_->Clear();
    }
  }
  _impl_.radius_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Circle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> Circle::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Circle, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Circle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protobuf.Common common = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Circle, _impl_.common_)}},
    // .protobuf.Point center = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Circle, _impl_.center_)}},
    // float radius = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Circle, _impl_.radius_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protobuf.Common common = 1;
    {PROTOBUF_FIELD_OFFSET(Circle, _impl_.common_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf.Point center = 2;
    {PROTOBUF_FIELD_OFFSET(Circle, _impl_.center_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float radius = 3;
    {PROTOBUF_FIELD_OFFSET(Circle, _impl_.radius_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf::Common>()},
    {::_pbi::TcParser::GetTable<::protobuf::Point>()},
  }}, {{
  }},
};

::uint8_t* Circle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Circle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .protobuf.Common common = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .protobuf.Point center = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::center(this),
        _Internal::center(this).GetCachedSize(), target, stream);
  }

  // float radius = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  ::uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Circle)
  return target;
}

::size_t Circle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Circle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .protobuf.Common common = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.common_);
    }

    // .protobuf.Point center = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.center_);
    }

  }
  // float radius = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  ::uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Circle::_class_data_ = {
    Circle::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Circle::GetClassData() const {
  return &_class_data_;
}

void Circle::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Circle*>(&to_msg);
  auto& from = static_cast<const Circle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Circle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_common()->::protobuf::Common::MergeFrom(
          from._internal_common());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_center()->::protobuf::Point::MergeFrom(
          from._internal_center());
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  ::uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Circle::CopyFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Circle::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Circle::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Circle::InternalSwap(Circle* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Circle, _impl_.radius_)
      + sizeof(Circle::_impl_.radius_)
      - PROTOBUF_FIELD_OFFSET(Circle, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::google::protobuf::Metadata Circle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_element_2eproto_getter, &descriptor_table_element_2eproto_once,
      file_level_metadata_element_2eproto[4]);
}
// ===================================================================

class Triangle::_Internal {
 public:
  using HasBits = decltype(std::declval<Triangle>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Triangle, _impl_._has_bits_);
  static const ::protobuf::Common& common(const Triangle* msg);
  static void set_has_common(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf::Point& point1(const Triangle* msg);
  static void set_has_point1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf::Point& point2(const Triangle* msg);
  static void set_has_point2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protobuf::Point& point3(const Triangle* msg);
  static void set_has_point3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::protobuf::Common& Triangle::_Internal::common(const Triangle* msg) {
  return *msg->_impl_.common_;
}
const ::protobuf::Point& Triangle::_Internal::point1(const Triangle* msg) {
  return *msg->_impl_.point1_;
}
const ::protobuf::Point& Triangle::_Internal::point2(const Triangle* msg) {
  return *msg->_impl_.point2_;
}
const ::protobuf::Point& Triangle::_Internal::point3(const Triangle* msg) {
  return *msg->_impl_.point3_;
}
Triangle::Triangle(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.Triangle)
}
inline PROTOBUF_NDEBUG_INLINE Triangle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Triangle::Triangle(
    ::google::protobuf::Arena* arena,
    const Triangle& from)
    : ::google::protobuf::Message(arena) {
  Triangle* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.common_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::protobuf::Common>(arena, *from._impl_.common_)
                : nullptr;
  _impl_.point1_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::protobuf::Point>(arena, *from._impl_.point1_)
                : nullptr;
  _impl_.point2_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::protobuf::Point>(arena, *from._impl_.point2_)
                : nullptr;
  _impl_.point3_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::protobuf::Point>(arena, *from._impl_.point3_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:protobuf.Triangle)
}
inline PROTOBUF_NDEBUG_INLINE Triangle::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Triangle::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, common_),
           0,
           offsetof(Impl_, point3_) -
               offsetof(Impl_, common_) +
               sizeof(Impl_::point3_));
}
Triangle::~Triangle() {
  // @@protoc_insertion_point(destructor:protobuf.Triangle)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Triangle::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.common_;
  delete _impl_.point1_;
  delete _impl_.point2_;
  delete _impl_.point3_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Triangle::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Triangle)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.common_ != nullptr);
      _impl_.common_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.point1_ != nullptr);
      _impl_.point1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.point2_ != nullptr);
      _impl_.point2_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.point3_ != nullptr);
      _impl_.point3_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Triangle::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> Triangle::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Triangle, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Triangle_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .protobuf.Point point3 = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Triangle, _impl_.point3_)}},
    // .protobuf.Common common = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Triangle, _impl_.common_)}},
    // .protobuf.Point point1 = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Triangle, _impl_.point1_)}},
    // .protobuf.Point point2 = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Triangle, _impl_.point2_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protobuf.Common common = 1;
    {PROTOBUF_FIELD_OFFSET(Triangle, _impl_.common_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf.Point point1 = 2;
    {PROTOBUF_FIELD_OFFSET(Triangle, _impl_.point1_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf.Point point2 = 3;
    {PROTOBUF_FIELD_OFFSET(Triangle, _impl_.point2_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf.Point point3 = 4;
    {PROTOBUF_FIELD_OFFSET(Triangle, _impl_.point3_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf::Common>()},
    {::_pbi::TcParser::GetTable<::protobuf::Point>()},
    {::_pbi::TcParser::GetTable<::protobuf::Point>()},
    {::_pbi::TcParser::GetTable<::protobuf::Point>()},
  }}, {{
  }},
};

::uint8_t* Triangle::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Triangle)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .protobuf.Common common = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .protobuf.Point point1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::point1(this),
        _Internal::point1(this).GetCachedSize(), target, stream);
  }

  // .protobuf.Point point2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::point2(this),
        _Internal::point2(this).GetCachedSize(), target, stream);
  }

  // .protobuf.Point point3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::point3(this),
        _Internal::point3(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Triangle)
  return target;
}

::size_t Triangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Triangle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .protobuf.Common common = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.common_);
    }

    // .protobuf.Point point1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.point1_);
    }

    // .protobuf.Point point2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.point2_);
    }

    // .protobuf.Point point3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.point3_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Triangle::_class_data_ = {
    Triangle::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Triangle::GetClassData() const {
  return &_class_data_;
}

void Triangle::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Triangle*>(&to_msg);
  auto& from = static_cast<const Triangle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Triangle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_common()->::protobuf::Common::MergeFrom(
          from._internal_common());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_point1()->::protobuf::Point::MergeFrom(
          from._internal_point1());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_point2()->::protobuf::Point::MergeFrom(
          from._internal_point2());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_point3()->::protobuf::Point::MergeFrom(
          from._internal_point3());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Triangle::CopyFrom(const Triangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Triangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Triangle::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Triangle::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Triangle::InternalSwap(Triangle* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Triangle, _impl_.point3_)
      + sizeof(Triangle::_impl_.point3_)
      - PROTOBUF_FIELD_OFFSET(Triangle, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::google::protobuf::Metadata Triangle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_element_2eproto_getter, &descriptor_table_element_2eproto_once,
      file_level_metadata_element_2eproto[5]);
}
// ===================================================================

class Square::_Internal {
 public:
  using HasBits = decltype(std::declval<Square>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Square, _impl_._has_bits_);
  static const ::protobuf::Common& common(const Square* msg);
  static void set_has_common(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf::Point& topleft(const Square* msg);
  static void set_has_topleft(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf::Common& Square::_Internal::common(const Square* msg) {
  return *msg->_impl_.common_;
}
const ::protobuf::Point& Square::_Internal::topleft(const Square* msg) {
  return *msg->_impl_.topleft_;
}
Square::Square(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.Square)
}
inline PROTOBUF_NDEBUG_INLINE Square::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Square::Square(
    ::google::protobuf::Arena* arena,
    const Square& from)
    : ::google::protobuf::Message(arena) {
  Square* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.common_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::protobuf::Common>(arena, *from._impl_.common_)
                : nullptr;
  _impl_.topleft_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::protobuf::Point>(arena, *from._impl_.topleft_)
                : nullptr;
  _impl_.side_length_ = from._impl_.side_length_;

  // @@protoc_insertion_point(copy_constructor:protobuf.Square)
}
inline PROTOBUF_NDEBUG_INLINE Square::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Square::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, common_),
           0,
           offsetof(Impl_, side_length_) -
               offsetof(Impl_, common_) +
               sizeof(Impl_::side_length_));
}
Square::~Square() {
  // @@protoc_insertion_point(destructor:protobuf.Square)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Square::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.common_;
  delete _impl_.topleft_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Square::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Square)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.common_ != nullptr);
      _impl_.common_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.topleft_ != nullptr);
      _impl_.topleft_->Clear();
    }
  }
  _impl_.side_length_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Square::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> Square::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Square, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Square_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protobuf.Common common = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Square, _impl_.common_)}},
    // .protobuf.Point topleft = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Square, _impl_.topleft_)}},
    // float side_length = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Square, _impl_.side_length_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protobuf.Common common = 1;
    {PROTOBUF_FIELD_OFFSET(Square, _impl_.common_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf.Point topleft = 2;
    {PROTOBUF_FIELD_OFFSET(Square, _impl_.topleft_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float side_length = 3;
    {PROTOBUF_FIELD_OFFSET(Square, _impl_.side_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf::Common>()},
    {::_pbi::TcParser::GetTable<::protobuf::Point>()},
  }}, {{
  }},
};

::uint8_t* Square::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Square)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .protobuf.Common common = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .protobuf.Point topleft = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::topleft(this),
        _Internal::topleft(this).GetCachedSize(), target, stream);
  }

  // float side_length = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_side_length = this->_internal_side_length();
  ::uint32_t raw_side_length;
  memcpy(&raw_side_length, &tmp_side_length, sizeof(tmp_side_length));
  if (raw_side_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_side_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Square)
  return target;
}

::size_t Square::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Square)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .protobuf.Common common = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.common_);
    }

    // .protobuf.Point topleft = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.topleft_);
    }

  }
  // float side_length = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_side_length = this->_internal_side_length();
  ::uint32_t raw_side_length;
  memcpy(&raw_side_length, &tmp_side_length, sizeof(tmp_side_length));
  if (raw_side_length != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Square::_class_data_ = {
    Square::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Square::GetClassData() const {
  return &_class_data_;
}

void Square::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Square*>(&to_msg);
  auto& from = static_cast<const Square&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Square)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_common()->::protobuf::Common::MergeFrom(
          from._internal_common());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_topleft()->::protobuf::Point::MergeFrom(
          from._internal_topleft());
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_side_length = from._internal_side_length();
  ::uint32_t raw_side_length;
  memcpy(&raw_side_length, &tmp_side_length, sizeof(tmp_side_length));
  if (raw_side_length != 0) {
    _this->_internal_set_side_length(from._internal_side_length());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Square::CopyFrom(const Square& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Square)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Square::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Square::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Square::InternalSwap(Square* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Square, _impl_.side_length_)
      + sizeof(Square::_impl_.side_length_)
      - PROTOBUF_FIELD_OFFSET(Square, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::google::protobuf::Metadata Square::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_element_2eproto_getter, &descriptor_table_element_2eproto_once,
      file_level_metadata_element_2eproto[6]);
}
// ===================================================================

class Text::_Internal {
 public:
  using HasBits = decltype(std::declval<Text>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Text, _impl_._has_bits_);
  static const ::protobuf::Common& common(const Text* msg);
  static void set_has_common(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf::Point& center(const Text* msg);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf::Common& Text::_Internal::common(const Text* msg) {
  return *msg->_impl_.common_;
}
const ::protobuf::Point& Text::_Internal::center(const Text* msg) {
  return *msg->_impl_.center_;
}
Text::Text(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.Text)
}
inline PROTOBUF_NDEBUG_INLINE Text::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        content_(arena, from.content_) {}

Text::Text(
    ::google::protobuf::Arena* arena,
    const Text& from)
    : ::google::protobuf::Message(arena) {
  Text* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.common_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::protobuf::Common>(arena, *from._impl_.common_)
                : nullptr;
  _impl_.center_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::protobuf::Point>(arena, *from._impl_.center_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:protobuf.Text)
}
inline PROTOBUF_NDEBUG_INLINE Text::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        content_(arena) {}

inline void Text::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, common_),
           0,
           offsetof(Impl_, center_) -
               offsetof(Impl_, common_) +
               sizeof(Impl_::center_));
}
Text::~Text() {
  // @@protoc_insertion_point(destructor:protobuf.Text)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Text::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.content_.Destroy();
  delete _impl_.common_;
  delete _impl_.center_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Text)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.common_ != nullptr);
      _impl_.common_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.center_ != nullptr);
      _impl_.center_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Text::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 29, 2> Text::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Text, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Text_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protobuf.Common common = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Text, _impl_.common_)}},
    // .protobuf.Point center = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Text, _impl_.center_)}},
    // string content = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Text, _impl_.content_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protobuf.Common common = 1;
    {PROTOBUF_FIELD_OFFSET(Text, _impl_.common_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf.Point center = 2;
    {PROTOBUF_FIELD_OFFSET(Text, _impl_.center_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string content = 3;
    {PROTOBUF_FIELD_OFFSET(Text, _impl_.content_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf::Common>()},
    {::_pbi::TcParser::GetTable<::protobuf::Point>()},
  }}, {{
    "\15\0\0\7\0\0\0\0"
    "protobuf.Text"
    "content"
  }},
};

::uint8_t* Text::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Text)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .protobuf.Common common = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .protobuf.Point center = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::center(this),
        _Internal::center(this).GetCachedSize(), target, stream);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    const std::string& _s = this->_internal_content();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Text.content");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Text)
  return target;
}

::size_t Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Text)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_content());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .protobuf.Common common = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.common_);
    }

    // .protobuf.Point center = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.center_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Text::_class_data_ = {
    Text::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Text::GetClassData() const {
  return &_class_data_;
}

void Text::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Text*>(&to_msg);
  auto& from = static_cast<const Text&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Text)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_common()->::protobuf::Common::MergeFrom(
          from._internal_common());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_center()->::protobuf::Point::MergeFrom(
          from._internal_center());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Text::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Text::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Text::InternalSwap(Text* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_, &other->_impl_.content_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Text, _impl_.center_)
      + sizeof(Text::_impl_.center_)
      - PROTOBUF_FIELD_OFFSET(Text, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::google::protobuf::Metadata Text::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_element_2eproto_getter, &descriptor_table_element_2eproto_once,
      file_level_metadata_element_2eproto[7]);
}
// ===================================================================

class Comment::_Internal {
 public:
};

Comment::Comment(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.Comment)
}
inline PROTOBUF_NDEBUG_INLINE Comment::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : user_id_(arena, from.user_id_),
        content_(arena, from.content_),
        _cached_size_{0} {}

Comment::Comment(
    ::google::protobuf::Arena* arena,
    const Comment& from)
    : ::google::protobuf::Message(arena) {
  Comment* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:protobuf.Comment)
}
inline PROTOBUF_NDEBUG_INLINE Comment::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : user_id_(arena),
        content_(arena),
        _cached_size_{0} {}

inline void Comment::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Comment::~Comment() {
  // @@protoc_insertion_point(destructor:protobuf.Comment)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Comment::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.content_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Comment::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Comment)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Comment::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 39, 2> Comment::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Comment_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string content = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Comment, _impl_.content_)}},
    // string user_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Comment, _impl_.user_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string user_id = 1;
    {PROTOBUF_FIELD_OFFSET(Comment, _impl_.user_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string content = 2;
    {PROTOBUF_FIELD_OFFSET(Comment, _impl_.content_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\20\7\7\0\0\0\0\0"
    "protobuf.Comment"
    "user_id"
    "content"
  }},
};

::uint8_t* Comment::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Comment)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    const std::string& _s = this->_internal_user_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Comment.user_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    const std::string& _s = this->_internal_content();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Comment.content");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Comment)
  return target;
}

::size_t Comment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Comment)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_user_id());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Comment::_class_data_ = {
    Comment::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Comment::GetClassData() const {
  return &_class_data_;
}

void Comment::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Comment*>(&to_msg);
  auto& from = static_cast<const Comment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Comment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Comment::CopyFrom(const Comment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Comment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Comment::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Comment::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Comment::InternalSwap(Comment* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, &other->_impl_.user_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_, &other->_impl_.content_, arena);
}

::google::protobuf::Metadata Comment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_element_2eproto_getter, &descriptor_table_element_2eproto_once,
      file_level_metadata_element_2eproto[8]);
}
// ===================================================================

class Picture::_Internal {
 public:
  using HasBits = decltype(std::declval<Picture>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Picture, _impl_._has_bits_);
  static const ::protobuf::Common& common(const Picture* msg);
  static void set_has_common(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf::Point& center(const Picture* msg);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf::Common& Picture::_Internal::common(const Picture* msg) {
  return *msg->_impl_.common_;
}
const ::protobuf::Point& Picture::_Internal::center(const Picture* msg) {
  return *msg->_impl_.center_;
}
Picture::Picture(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.Picture)
}
inline PROTOBUF_NDEBUG_INLINE Picture::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        comments_{visibility, arena, from.comments_},
        file_name_(arena, from.file_name_),
        data_(arena, from.data_) {}

Picture::Picture(
    ::google::protobuf::Arena* arena,
    const Picture& from)
    : ::google::protobuf::Message(arena) {
  Picture* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.common_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::protobuf::Common>(arena, *from._impl_.common_)
                : nullptr;
  _impl_.center_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::protobuf::Point>(arena, *from._impl_.center_)
                : nullptr;
  _impl_.top_side_length_ = from._impl_.top_side_length_;

  // @@protoc_insertion_point(copy_constructor:protobuf.Picture)
}
inline PROTOBUF_NDEBUG_INLINE Picture::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        comments_{visibility, arena},
        file_name_(arena),
        data_(arena) {}

inline void Picture::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, common_),
           0,
           offsetof(Impl_, top_side_length_) -
               offsetof(Impl_, common_) +
               sizeof(Impl_::top_side_length_));
}
Picture::~Picture() {
  // @@protoc_insertion_point(destructor:protobuf.Picture)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Picture::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.file_name_.Destroy();
  _impl_.data_.Destroy();
  delete _impl_.common_;
  delete _impl_.center_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Picture::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Picture)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.comments_.Clear();
  _impl_.file_name_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.common_ != nullptr);
      _impl_.common_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.center_ != nullptr);
      _impl_.center_->Clear();
    }
  }
  _impl_.top_side_length_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Picture::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 3, 34, 2> Picture::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Picture, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Picture_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .protobuf.Common common = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Picture, _impl_.common_)}},
    // string file_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Picture, _impl_.file_name_)}},
    // .protobuf.Point center = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(Picture, _impl_.center_)}},
    // float top_side_length = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(Picture, _impl_.top_side_length_)}},
    // bytes data = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Picture, _impl_.data_)}},
    // repeated .protobuf.Comment comments = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 2, PROTOBUF_FIELD_OFFSET(Picture, _impl_.comments_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .protobuf.Common common = 1;
    {PROTOBUF_FIELD_OFFSET(Picture, _impl_.common_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string file_name = 2;
    {PROTOBUF_FIELD_OFFSET(Picture, _impl_.file_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .protobuf.Point center = 3;
    {PROTOBUF_FIELD_OFFSET(Picture, _impl_.center_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float top_side_length = 4;
    {PROTOBUF_FIELD_OFFSET(Picture, _impl_.top_side_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bytes data = 5;
    {PROTOBUF_FIELD_OFFSET(Picture, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated .protobuf.Comment comments = 6;
    {PROTOBUF_FIELD_OFFSET(Picture, _impl_.comments_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf::Common>()},
    {::_pbi::TcParser::GetTable<::protobuf::Point>()},
    {::_pbi::TcParser::GetTable<::protobuf::Comment>()},
  }}, {{
    "\20\0\11\0\0\0\0\0"
    "protobuf.Picture"
    "file_name"
  }},
};

::uint8_t* Picture::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Picture)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .protobuf.Common common = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    const std::string& _s = this->_internal_file_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.Picture.file_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .protobuf.Point center = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::center(this),
        _Internal::center(this).GetCachedSize(), target, stream);
  }

  // float top_side_length = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_top_side_length = this->_internal_top_side_length();
  ::uint32_t raw_top_side_length;
  memcpy(&raw_top_side_length, &tmp_top_side_length, sizeof(tmp_top_side_length));
  if (raw_top_side_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_top_side_length(), target);
  }

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // repeated .protobuf.Comment comments = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_comments_size()); i < n; i++) {
    const auto& repfield = this->_internal_comments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Picture)
  return target;
}

::size_t Picture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Picture)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuf.Comment comments = 6;
  total_size += 1UL * this->_internal_comments_size();
  for (const auto& msg : this->_internal_comments()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_file_name());
  }

  // bytes data = 5;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .protobuf.Common common = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.common_);
    }

    // .protobuf.Point center = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.center_);
    }

  }
  // float top_side_length = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_top_side_length = this->_internal_top_side_length();
  ::uint32_t raw_top_side_length;
  memcpy(&raw_top_side_length, &tmp_top_side_length, sizeof(tmp_top_side_length));
  if (raw_top_side_length != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Picture::_class_data_ = {
    Picture::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Picture::GetClassData() const {
  return &_class_data_;
}

void Picture::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Picture*>(&to_msg);
  auto& from = static_cast<const Picture&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Picture)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_comments()->MergeFrom(
      from._internal_comments());
  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_common()->::protobuf::Common::MergeFrom(
          from._internal_common());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_center()->::protobuf::Point::MergeFrom(
          from._internal_center());
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_top_side_length = from._internal_top_side_length();
  ::uint32_t raw_top_side_length;
  memcpy(&raw_top_side_length, &tmp_top_side_length, sizeof(tmp_top_side_length));
  if (raw_top_side_length != 0) {
    _this->_internal_set_top_side_length(from._internal_top_side_length());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Picture::CopyFrom(const Picture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Picture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Picture::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Picture::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Picture::InternalSwap(Picture* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.comments_.InternalSwap(&other->_impl_.comments_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.file_name_, &other->_impl_.file_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Picture, _impl_.top_side_length_)
      + sizeof(Picture::_impl_.top_side_length_)
      - PROTOBUF_FIELD_OFFSET(Picture, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::google::protobuf::Metadata Picture::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_element_2eproto_getter, &descriptor_table_element_2eproto_once,
      file_level_metadata_element_2eproto[9]);
}
// ===================================================================

class StickyNote::_Internal {
 public:
  using HasBits = decltype(std::declval<StickyNote>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StickyNote, _impl_._has_bits_);
  static const ::protobuf::Common& common(const StickyNote* msg);
  static void set_has_common(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf::Point& center(const StickyNote* msg);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protobuf::Common& StickyNote::_Internal::common(const StickyNote* msg) {
  return *msg->_impl_.common_;
}
const ::protobuf::Point& StickyNote::_Internal::center(const StickyNote* msg) {
  return *msg->_impl_.center_;
}
StickyNote::StickyNote(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.StickyNote)
}
inline PROTOBUF_NDEBUG_INLINE StickyNote::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        content_(arena, from.content_) {}

StickyNote::StickyNote(
    ::google::protobuf::Arena* arena,
    const StickyNote& from)
    : ::google::protobuf::Message(arena) {
  StickyNote* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.common_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::protobuf::Common>(arena, *from._impl_.common_)
                : nullptr;
  _impl_.center_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::protobuf::Point>(arena, *from._impl_.center_)
                : nullptr;
  _impl_.side_length_ = from._impl_.side_length_;

  // @@protoc_insertion_point(copy_constructor:protobuf.StickyNote)
}
inline PROTOBUF_NDEBUG_INLINE StickyNote::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        content_(arena) {}

inline void StickyNote::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, common_),
           0,
           offsetof(Impl_, side_length_) -
               offsetof(Impl_, common_) +
               sizeof(Impl_::side_length_));
}
StickyNote::~StickyNote() {
  // @@protoc_insertion_point(destructor:protobuf.StickyNote)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StickyNote::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.content_.Destroy();
  delete _impl_.common_;
  delete _impl_.center_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StickyNote::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.StickyNote)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.common_ != nullptr);
      _impl_.common_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.center_ != nullptr);
      _impl_.center_->Clear();
    }
  }
  _impl_.side_length_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StickyNote::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 35, 2> StickyNote::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StickyNote, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StickyNote_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string content = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(StickyNote, _impl_.content_)}},
    // .protobuf.Common common = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StickyNote, _impl_.common_)}},
    // .protobuf.Point center = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(StickyNote, _impl_.center_)}},
    // float side_length = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(StickyNote, _impl_.side_length_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .protobuf.Common common = 1;
    {PROTOBUF_FIELD_OFFSET(StickyNote, _impl_.common_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf.Point center = 2;
    {PROTOBUF_FIELD_OFFSET(StickyNote, _impl_.center_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float side_length = 3;
    {PROTOBUF_FIELD_OFFSET(StickyNote, _impl_.side_length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string content = 4;
    {PROTOBUF_FIELD_OFFSET(StickyNote, _impl_.content_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf::Common>()},
    {::_pbi::TcParser::GetTable<::protobuf::Point>()},
  }}, {{
    "\23\0\0\0\7\0\0\0"
    "protobuf.StickyNote"
    "content"
  }},
};

::uint8_t* StickyNote::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.StickyNote)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .protobuf.Common common = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::common(this),
        _Internal::common(this).GetCachedSize(), target, stream);
  }

  // .protobuf.Point center = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::center(this),
        _Internal::center(this).GetCachedSize(), target, stream);
  }

  // float side_length = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_side_length = this->_internal_side_length();
  ::uint32_t raw_side_length;
  memcpy(&raw_side_length, &tmp_side_length, sizeof(tmp_side_length));
  if (raw_side_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_side_length(), target);
  }

  // string content = 4;
  if (!this->_internal_content().empty()) {
    const std::string& _s = this->_internal_content();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protobuf.StickyNote.content");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.StickyNote)
  return target;
}

::size_t StickyNote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.StickyNote)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 4;
  if (!this->_internal_content().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_content());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .protobuf.Common common = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.common_);
    }

    // .protobuf.Point center = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.center_);
    }

  }
  // float side_length = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_side_length = this->_internal_side_length();
  ::uint32_t raw_side_length;
  memcpy(&raw_side_length, &tmp_side_length, sizeof(tmp_side_length));
  if (raw_side_length != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StickyNote::_class_data_ = {
    StickyNote::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StickyNote::GetClassData() const {
  return &_class_data_;
}

void StickyNote::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StickyNote*>(&to_msg);
  auto& from = static_cast<const StickyNote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.StickyNote)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_common()->::protobuf::Common::MergeFrom(
          from._internal_common());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_center()->::protobuf::Point::MergeFrom(
          from._internal_center());
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_side_length = from._internal_side_length();
  ::uint32_t raw_side_length;
  memcpy(&raw_side_length, &tmp_side_length, sizeof(tmp_side_length));
  if (raw_side_length != 0) {
    _this->_internal_set_side_length(from._internal_side_length());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StickyNote::CopyFrom(const StickyNote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.StickyNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StickyNote::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StickyNote::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StickyNote::InternalSwap(StickyNote* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_, &other->_impl_.content_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StickyNote, _impl_.side_length_)
      + sizeof(StickyNote::_impl_.side_length_)
      - PROTOBUF_FIELD_OFFSET(StickyNote, _impl_.common_)>(
          reinterpret_cast<char*>(&_impl_.common_),
          reinterpret_cast<char*>(&other->_impl_.common_));
}

::google::protobuf::Metadata StickyNote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_element_2eproto_getter, &descriptor_table_element_2eproto_once,
      file_level_metadata_element_2eproto[10]);
}
// ===================================================================

class Element::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::protobuf::Element, _impl_._oneof_case_);
  static const ::protobuf::Path& path(const Element* msg);
  static const ::protobuf::Line& line(const Element* msg);
  static const ::protobuf::Circle& circle(const Element* msg);
  static const ::protobuf::Triangle& triangle(const Element* msg);
  static const ::protobuf::Square& square(const Element* msg);
  static const ::protobuf::Text& text(const Element* msg);
  static const ::protobuf::Picture& picture(const Element* msg);
  static const ::protobuf::StickyNote& stickynote(const Element* msg);
};

const ::protobuf::Path& Element::_Internal::path(const Element* msg) {
  return *msg->_impl_.element_type_.path_;
}
const ::protobuf::Line& Element::_Internal::line(const Element* msg) {
  return *msg->_impl_.element_type_.line_;
}
const ::protobuf::Circle& Element::_Internal::circle(const Element* msg) {
  return *msg->_impl_.element_type_.circle_;
}
const ::protobuf::Triangle& Element::_Internal::triangle(const Element* msg) {
  return *msg->_impl_.element_type_.triangle_;
}
const ::protobuf::Square& Element::_Internal::square(const Element* msg) {
  return *msg->_impl_.element_type_.square_;
}
const ::protobuf::Text& Element::_Internal::text(const Element* msg) {
  return *msg->_impl_.element_type_.text_;
}
const ::protobuf::Picture& Element::_Internal::picture(const Element* msg) {
  return *msg->_impl_.element_type_.picture_;
}
const ::protobuf::StickyNote& Element::_Internal::stickynote(const Element* msg) {
  return *msg->_impl_.element_type_.stickynote_;
}
void Element::set_allocated_path(::protobuf::Path* path) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_element_type();
  if (path) {
    ::google::protobuf::Arena* submessage_arena = path->GetArena();
    if (message_arena != submessage_arena) {
      path = ::google::protobuf::internal::GetOwnedMessage(message_arena, path, submessage_arena);
    }
    set_has_path();
    _impl_.element_type_.path_ = path;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Element.path)
}
void Element::set_allocated_line(::protobuf::Line* line) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_element_type();
  if (line) {
    ::google::protobuf::Arena* submessage_arena = line->GetArena();
    if (message_arena != submessage_arena) {
      line = ::google::protobuf::internal::GetOwnedMessage(message_arena, line, submessage_arena);
    }
    set_has_line();
    _impl_.element_type_.line_ = line;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Element.line)
}
void Element::set_allocated_circle(::protobuf::Circle* circle) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_element_type();
  if (circle) {
    ::google::protobuf::Arena* submessage_arena = circle->GetArena();
    if (message_arena != submessage_arena) {
      circle = ::google::protobuf::internal::GetOwnedMessage(message_arena, circle, submessage_arena);
    }
    set_has_circle();
    _impl_.element_type_.circle_ = circle;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Element.circle)
}
void Element::set_allocated_triangle(::protobuf::Triangle* triangle) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_element_type();
  if (triangle) {
    ::google::protobuf::Arena* submessage_arena = triangle->GetArena();
    if (message_arena != submessage_arena) {
      triangle = ::google::protobuf::internal::GetOwnedMessage(message_arena, triangle, submessage_arena);
    }
    set_has_triangle();
    _impl_.element_type_.triangle_ = triangle;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Element.triangle)
}
void Element::set_allocated_square(::protobuf::Square* square) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_element_type();
  if (square) {
    ::google::protobuf::Arena* submessage_arena = square->GetArena();
    if (message_arena != submessage_arena) {
      square = ::google::protobuf::internal::GetOwnedMessage(message_arena, square, submessage_arena);
    }
    set_has_square();
    _impl_.element_type_.square_ = square;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Element.square)
}
void Element::set_allocated_text(::protobuf::Text* text) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_element_type();
  if (text) {
    ::google::protobuf::Arena* submessage_arena = text->GetArena();
    if (message_arena != submessage_arena) {
      text = ::google::protobuf::internal::GetOwnedMessage(message_arena, text, submessage_arena);
    }
    set_has_text();
    _impl_.element_type_.text_ = text;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Element.text)
}
void Element::set_allocated_picture(::protobuf::Picture* picture) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_element_type();
  if (picture) {
    ::google::protobuf::Arena* submessage_arena = picture->GetArena();
    if (message_arena != submessage_arena) {
      picture = ::google::protobuf::internal::GetOwnedMessage(message_arena, picture, submessage_arena);
    }
    set_has_picture();
    _impl_.element_type_.picture_ = picture;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Element.picture)
}
void Element::set_allocated_stickynote(::protobuf::StickyNote* stickynote) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_element_type();
  if (stickynote) {
    ::google::protobuf::Arena* submessage_arena = stickynote->GetArena();
    if (message_arena != submessage_arena) {
      stickynote = ::google::protobuf::internal::GetOwnedMessage(message_arena, stickynote, submessage_arena);
    }
    set_has_stickynote();
    _impl_.element_type_.stickynote_ = stickynote;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.Element.stickynote)
}
Element::Element(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protobuf.Element)
}
inline PROTOBUF_NDEBUG_INLINE Element::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : element_type_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Element::Element(
    ::google::protobuf::Arena* arena,
    const Element& from)
    : ::google::protobuf::Message(arena) {
  Element* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (element_type_case()) {
    case ELEMENT_TYPE_NOT_SET:
      break;
      case kPath:
        _impl_.element_type_.path_ = CreateMaybeMessage<::protobuf::Path>(arena, *from._impl_.element_type_.path_);
        break;
      case kLine:
        _impl_.element_type_.line_ = CreateMaybeMessage<::protobuf::Line>(arena, *from._impl_.element_type_.line_);
        break;
      case kCircle:
        _impl_.element_type_.circle_ = CreateMaybeMessage<::protobuf::Circle>(arena, *from._impl_.element_type_.circle_);
        break;
      case kTriangle:
        _impl_.element_type_.triangle_ = CreateMaybeMessage<::protobuf::Triangle>(arena, *from._impl_.element_type_.triangle_);
        break;
      case kSquare:
        _impl_.element_type_.square_ = CreateMaybeMessage<::protobuf::Square>(arena, *from._impl_.element_type_.square_);
        break;
      case kText:
        _impl_.element_type_.text_ = CreateMaybeMessage<::protobuf::Text>(arena, *from._impl_.element_type_.text_);
        break;
      case kPicture:
        _impl_.element_type_.picture_ = CreateMaybeMessage<::protobuf::Picture>(arena, *from._impl_.element_type_.picture_);
        break;
      case kStickynote:
        _impl_.element_type_.stickynote_ = CreateMaybeMessage<::protobuf::StickyNote>(arena, *from._impl_.element_type_.stickynote_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:protobuf.Element)
}
inline PROTOBUF_NDEBUG_INLINE Element::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : element_type_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Element::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Element::~Element() {
  // @@protoc_insertion_point(destructor:protobuf.Element)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Element::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_element_type()) {
    clear_element_type();
  }
  _impl_.~Impl_();
}

void Element::clear_element_type() {
// @@protoc_insertion_point(one_of_clear_start:protobuf.Element)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (element_type_case()) {
    case kPath: {
      if (GetArena() == nullptr) {
        delete _impl_.element_type_.path_;
      }
      break;
    }
    case kLine: {
      if (GetArena() == nullptr) {
        delete _impl_.element_type_.line_;
      }
      break;
    }
    case kCircle: {
      if (GetArena() == nullptr) {
        delete _impl_.element_type_.circle_;
      }
      break;
    }
    case kTriangle: {
      if (GetArena() == nullptr) {
        delete _impl_.element_type_.triangle_;
      }
      break;
    }
    case kSquare: {
      if (GetArena() == nullptr) {
        delete _impl_.element_type_.square_;
      }
      break;
    }
    case kText: {
      if (GetArena() == nullptr) {
        delete _impl_.element_type_.text_;
      }
      break;
    }
    case kPicture: {
      if (GetArena() == nullptr) {
        delete _impl_.element_type_.picture_;
      }
      break;
    }
    case kStickynote: {
      if (GetArena() == nullptr) {
        delete _impl_.element_type_.stickynote_;
      }
      break;
    }
    case ELEMENT_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ELEMENT_TYPE_NOT_SET;
}


PROTOBUF_NOINLINE void Element::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Element)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_element_type();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Element::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 8, 8, 0, 2> Element::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Element_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .protobuf.Path path = 1;
    {PROTOBUF_FIELD_OFFSET(Element, _impl_.element_type_.path_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf.Line line = 2;
    {PROTOBUF_FIELD_OFFSET(Element, _impl_.element_type_.line_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf.Circle circle = 3;
    {PROTOBUF_FIELD_OFFSET(Element, _impl_.element_type_.circle_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf.Triangle triangle = 4;
    {PROTOBUF_FIELD_OFFSET(Element, _impl_.element_type_.triangle_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf.Square square = 5;
    {PROTOBUF_FIELD_OFFSET(Element, _impl_.element_type_.square_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf.Text text = 6;
    {PROTOBUF_FIELD_OFFSET(Element, _impl_.element_type_.text_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf.Picture picture = 7;
    {PROTOBUF_FIELD_OFFSET(Element, _impl_.element_type_.picture_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .protobuf.StickyNote stickynote = 8;
    {PROTOBUF_FIELD_OFFSET(Element, _impl_.element_type_.stickynote_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protobuf::Path>()},
    {::_pbi::TcParser::GetTable<::protobuf::Line>()},
    {::_pbi::TcParser::GetTable<::protobuf::Circle>()},
    {::_pbi::TcParser::GetTable<::protobuf::Triangle>()},
    {::_pbi::TcParser::GetTable<::protobuf::Square>()},
    {::_pbi::TcParser::GetTable<::protobuf::Text>()},
    {::_pbi::TcParser::GetTable<::protobuf::Picture>()},
    {::_pbi::TcParser::GetTable<::protobuf::StickyNote>()},
  }}, {{
  }},
};

::uint8_t* Element::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Element)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (element_type_case()) {
    case kPath: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, _Internal::path(this),
          _Internal::path(this).GetCachedSize(), target, stream);
      break;
    }
    case kLine: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::line(this),
          _Internal::line(this).GetCachedSize(), target, stream);
      break;
    }
    case kCircle: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::circle(this),
          _Internal::circle(this).GetCachedSize(), target, stream);
      break;
    }
    case kTriangle: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::triangle(this),
          _Internal::triangle(this).GetCachedSize(), target, stream);
      break;
    }
    case kSquare: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::square(this),
          _Internal::square(this).GetCachedSize(), target, stream);
      break;
    }
    case kText: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, _Internal::text(this),
          _Internal::text(this).GetCachedSize(), target, stream);
      break;
    }
    case kPicture: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, _Internal::picture(this),
          _Internal::picture(this).GetCachedSize(), target, stream);
      break;
    }
    case kStickynote: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, _Internal::stickynote(this),
          _Internal::stickynote(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Element)
  return target;
}

::size_t Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Element)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (element_type_case()) {
    // .protobuf.Path path = 1;
    case kPath: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.element_type_.path_);
      break;
    }
    // .protobuf.Line line = 2;
    case kLine: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.element_type_.line_);
      break;
    }
    // .protobuf.Circle circle = 3;
    case kCircle: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.element_type_.circle_);
      break;
    }
    // .protobuf.Triangle triangle = 4;
    case kTriangle: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.element_type_.triangle_);
      break;
    }
    // .protobuf.Square square = 5;
    case kSquare: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.element_type_.square_);
      break;
    }
    // .protobuf.Text text = 6;
    case kText: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.element_type_.text_);
      break;
    }
    // .protobuf.Picture picture = 7;
    case kPicture: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.element_type_.picture_);
      break;
    }
    // .protobuf.StickyNote stickynote = 8;
    case kStickynote: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.element_type_.stickynote_);
      break;
    }
    case ELEMENT_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Element::_class_data_ = {
    Element::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Element::GetClassData() const {
  return &_class_data_;
}

void Element::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Element*>(&to_msg);
  auto& from = static_cast<const Element&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Element)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.element_type_case()) {
    case kPath: {
      _this->_internal_mutable_path()->::protobuf::Path::MergeFrom(
          from._internal_path());
      break;
    }
    case kLine: {
      _this->_internal_mutable_line()->::protobuf::Line::MergeFrom(
          from._internal_line());
      break;
    }
    case kCircle: {
      _this->_internal_mutable_circle()->::protobuf::Circle::MergeFrom(
          from._internal_circle());
      break;
    }
    case kTriangle: {
      _this->_internal_mutable_triangle()->::protobuf::Triangle::MergeFrom(
          from._internal_triangle());
      break;
    }
    case kSquare: {
      _this->_internal_mutable_square()->::protobuf::Square::MergeFrom(
          from._internal_square());
      break;
    }
    case kText: {
      _this->_internal_mutable_text()->::protobuf::Text::MergeFrom(
          from._internal_text());
      break;
    }
    case kPicture: {
      _this->_internal_mutable_picture()->::protobuf::Picture::MergeFrom(
          from._internal_picture());
      break;
    }
    case kStickynote: {
      _this->_internal_mutable_stickynote()->::protobuf::StickyNote::MergeFrom(
          from._internal_stickynote());
      break;
    }
    case ELEMENT_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Element::CopyFrom(const Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Element::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Element::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Element::InternalSwap(Element* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.element_type_, other->_impl_.element_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Element::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_element_2eproto_getter, &descriptor_table_element_2eproto_once,
      file_level_metadata_element_2eproto[11]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
